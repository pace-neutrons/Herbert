===============================================================================================
             mfclass subclasses
===============================================================================================
Do we want to change the naming scheme?

mfclass_wrapfun 		utility function 

mfclass_sqw

mfclass_tobyfit




===============================================================================================
             mfclass
===============================================================================================

- fun_replace, fun_remove; constraints_replace etc. are not obviously logically named
  (or even correctly used!)

- function_set_scope uses the same algorithm as fun_init to determine how many 
  functions to set. SHould combine in one. In fact, as these are the only two
  func functions that change global/local status, they are rather similar in that
  they initialise.
  
- set_data etc.: of the properties ndim_, ndat_, ndatatot_, item_, ix_ only
  ndatatot_ is used widely. ndim_ doesn't seem to be used at all, ndata_, item_, ix_
  are only used in remove_data and replace_data, so can be created there.
  
- Really need to overhaul all the 'set' functions as they are not entirely logical
  and I don't know if they are all mutually consistent in how they set objects.
  Must overhaul definition of object status at each point.

- simulation: background, foreground options, option to use fit parameters (either
  as a second argument from an object, or store results of a fit). Also return chisqr.
  ptrans_initialise to return 'calculable' - true if function can be calculated but
  not fitted. repackage_output_data to cope with no free parameters.
  
- need to have single line call equivalent for full backwards compatibility with
  the original multifit.
  
2016/10/22: get_option/set_option: unsatisfactory, as it is not clear what the options
are, and no automatic help.

- Why np, nbp, ndtatot hidden?


  
Multifit_lsqr:
=================
- Not obvious why need multifit_lsqr_func_eval and multifit_func_eval. Especially
  as there is a perform_fit option in multifit_lsqr; this would mean that it could be
  made the sole interface function.

- Does multifit_lsqr cope with both foreground and background functions not present?
  This is a possible setting: should set the evaluated value to zero.
  
- repackage_output_data: optimisation is to handle case of empty msk argument 
  meaning no masking. Maybe extend to mfclass property msk_ too?
  
- repackage_output_data: doesn't work with data sets with no signal. Need to
  check all other routines for the same too.
  
- ptrans_par and friends: do they work with no background or foreground functions?

- MAJOR DEVELOPMENT: pass the fitting object down/make method of the object: want
  to get rid of the stupid persistent variables mess that we have particularly in
  Tobyfit
  
  
Constraints:
===============
Functions that have complex operations that might be better optimised
	binding_add
	binding_clear
	binding_resolve
	constraints_remove
	
	For example, in binding_add, 

- Do we actually need property bound_? After all, bound_ == (bound_to_>0)

- Can separate free from bindings as now completely separate - but no harm leaving as is in case
  change functionality back

- Should clear_bind look be able to clear specific parameters, not just all parameters
  for a given function ?
  
- Change name clear_free, set_free etc to *_fix, and invert so true = fixed, false=free ?
	
%========================================================================================
		BUGS
%========================================================================================
If have set several datasets, then set_local_foreground shoudl give dummy functions that 
number the same as the number of datasets.








%========================================================================================
% Very old stuff
% -----------------


- add checks to clear bindings in various functions add*, clear* (data and parameters)

- info_level



function 
% Determine if can replace existing local function set with a global function
% To be able to do this, must
% - functions all the same name
% - parameter lists all the same
% - 


%=====================================================================================
% Major architectural matters
%=====================================================================================
Is it better to not to have methods constraints_remove_, constraints_insert_ operating
on mfclass objects? The problem is it is not possible to compose methods like
constraints_replace because the output objects of constraints_remove_ are not
valid objects (no_, nbp_ are inconsistent with constraints section)



%=====================================================================================
% API to e.g. Tobyfit
%=====================================================================================
Currently have mfclass_gateway_parameter_get (and _set) which are used inTobyfit2
They are needed to get to a private function. SHould Find a neater way to have
common code.

Add a way of passing a global internal state (not just for a particular dataset. This
could be used by refine_moderator_sampling_table_buffer, for example.



