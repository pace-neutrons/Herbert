- fun_replace, fun_remove; constraints_replace etc. are not obviously logically named
  (or even correctly used!)

- function_set_scope uses the same algorithm as fun_init to determine how many 
  functions to set. SHould combine in one. In fact, as these are the only two
  func functions that change global/local status, they are rather similar in that
  they initialise.
  
- Really need to overhaul all the 'set' functions as they are not entirely logical
  and I dont know if they are all mutually consistent in how they set objects.
  Must overhaul definition of object status at each point.


  
Multifit_lsqr:
=================
- Not obvious why need multifit_lsqr_func_eval and multifit_func_eval. Especially
  as there is a perform_fit option in multifit_lsqr; this would mean that it could be
  made the sole interface function.

- Does multifit_lsqr cope with both foreground and background functions no present?
  THis is a possible setting: should set the evaluated value to zero.
  
  
Constraints:
===============
Functions that have complex operations that might be better optimised
	binding_add
	binding_clear
	binding_resolve
	constraints_remove
	
	For example, in binding_add, 

- Do we actually need property bound_? After all, bound_ == (bound_to_>0)

- Can separate free from bindings as now completely separate - but no harm leaving as is in case
  change functionality back

- Should clear_bind look be able to clear specific parameters, not just all parameters
  for a given function ?
  
- Change name clear_free, set_free etc to *_fix, and invert so true = fixed, false=free ?
	
%========================================================================================
		BUGS
%========================================================================================
If have set several datasets, then set_local_foreground shoudl give dummy functions that 
number the same as the number of datasets.








%========================================================================================
% Very old stuff
% -----------------


- add checks to clear bindings in various functions add*, clear* (data and parameters)

- info_level



function 
% Determine if can replace existing local function set with a global function
% To be able to do this, must
% - functions all the same name
% - parameter lists all the same
% - 


%=====================================================================================
% Major architectural matters
%=====================================================================================
Is it better to not to have methods constraints_remove_, constraints_insert_ operating
on mfclass objects? The problem is it is not possible to compose methods like
constraints_replace because the output objects of constraints_remove_ are not
valid objects (no_, nbp_ are inconsistent with constraints section)
