#!groovy

def getRepoURL() {
  return sh(script: 'git config --get remote.origin.url', returnStdout: true)
}

def getCommitSha() {
  return sh(script: 'git rev-parse HEAD', returnStdout: true)
}

def post_github_status(String state, String message) {
    // Non-PR builds will not set PR_STATUSES_URL - in which case we do not
    // want to post any statuses to Git
    if (env.PR_COMMIT_SHA) {
        def commit_sha = env.PR_COMMIT_SHA
    } else {
        def commit_sha = getCommitSha()
    }
    def repo_url = getRepoURL()
    sh 'echo ${commit_sha}'
    sh 'echo ${repo_url}'
    step([
        $class: 'GithubCommitStatus',
        reposSource: [$class: "ManuallyEnteredRepositorySource", url: repo_url],
        commitShaSource: [$class: "ManuallyEnteredShaSource", sha: commit_sha],
        errorHandlers: [[$class: 'ShallowAnyErrorHandler']],
        credentialsId: 'pace_builder_GitHub_access_token',
        statusResultSource: [
            $class: "ConditionalStatusResultSource",
            results: [
                [$class: "AnyBuildResult", message: message, state: state]
            ]
        ],
        withBackref: true
    ])
}

/* Required pipeline parameters:
 *   AGENT
 *   CMAKE_VERSION
 *   MATLAB_VERSION
 *   GCC_VERSION
 *   OPEN_MPI_VERSION
*/
pipeline {
    agent {
        label env.AGENT
    }

    stages {

        stage('Notify') {
            steps {
                post_github_status("PENDING", "The build is running")
            }
        }

        stage('Build') {
            steps {
                sh '''
                    module load cmake/\$CMAKE_VERSION &&
                    module load matlab/\$MATLAB_VERSION &&
                    module load gcc/\$GCC_VERSION &&
                    module load openmpi/\$OPEN_MPI_VERSION &&
                    ./tools/build_config/build.sh --print_versions --build
                '''
            }
        }

        stage('Test') {
            steps {
                sh '''
                    module load cmake/\$CMAKE_VERSION &&
                    module load matlab/\$MATLAB_VERSION &&
                    module load gcc/\$GCC_VERSION &&
                    module load openmpi/\$OPEN_MPI_VERSION &&
                    ./tools/build_config/build.sh --test
                '''
            }
        }

        stage('Package') {
            steps {
                sh './tools/build_config/build.sh --package'
            }
        }
    }

    post {
        always {
            // archive CTest results file
            archiveArtifacts(
                artifacts: 'build/Testing/**/*.xml',
                fingerprint: true
            )

            xunit (
                testTimeMargin: '3000',
                thresholdMode: 1,
                thresholds: [
                    skipped(failureThreshold: '0'),
                    failed(failureThreshold: '0')
                ],
                tools: [
                    CTest(
                        pattern: 'build/Testing/**/*.xml',
                        deleteOutputFiles: true,
                        failIfNotNew: false,
                        skipNoTestFiles: true,
                        stopProcessingIfError: true
                    )
                ]
            )
        }

        success {
            post_github_status("SUCCESS", "The build succeeded")
        }

        failure {
            post_github_status("FAILURE", "The build failed")
        }

        cleanup {
            deleteDir()
        }
    }
}
