#!groovy

def post_github_status(String state, String message) {
    withCredentials([string(credentialsId: 'GitHub_API_Token',
            variable: 'api_token')]) {
        sh """
            if [[ -z \${PR_STATUSES_URL} ]]; then \
                commit_sha=\$(git rev-parse HEAD); \
                PR_STATUSES_URL="https://api.github.com/repos/pace-neutrons/Herbert/statuses/\${commit_sha}"; \
            fi && \
            curl -H "Authorization: token ${api_token}" \
                --request POST \
                --data '{"state": "${state}", \
                         "description": "${message}", \
                         "target_url": "$BUILD_URL", \
                         "context": "$JOB_BASE_NAME"}' \
                $PR_STATUSES_URL > /dev/null
        """
    }
}

/* Required pipeline parameters:
 *   AGENT
 *   CMAKE_VERSION
 *   MATLAB_VERSION
 *   GCC_VERSION
 *   OPEN_MPI_VERSION
*/
pipeline {
    agent {
        label env.AGENT
    }

    stages {

        stage('Notify') {
            steps {
                post_github_status("PENDING", "The build is running")
            }
        }

        stage('Build') {
            steps {
                sh '''
                    module load cmake/\$CMAKE_VERSION &&
                    module load matlab/\$MATLAB_VERSION &&
                    module load gcc/\$GCC_VERSION &&
                    module load openmpi/\$OPEN_MPI_VERSION &&
                    ./tools/build_config/build.sh --print_versions --build
                '''
            }
        }

        stage('Test') {
            steps {
                sh '''
                    module load cmake/\$CMAKE_VERSION &&
                    module load matlab/\$MATLAB_VERSION &&
                    module load gcc/\$GCC_VERSION &&
                    module load openmpi/\$OPEN_MPI_VERSION &&
                    ./tools/build_config/build.sh --test
                '''
            }
        }

        stage('Package') {
            steps {
                sh './tools/build_config/build.sh --package'
            }
        }
    }

    post {
        always {
            // archive CTest results file
            archiveArtifacts(
                artifacts: 'build/Testing/**/*.xml',
                fingerprint: true
            )

            xunit (
                testTimeMargin: '3000',
                thresholdMode: 1,
                thresholds: [
                    skipped(failureThreshold: '0'),
                    failed(failureThreshold: '0')
                ],
                tools: [
                    CTest(
                        pattern: 'build/Testing/**/*.xml',
                        deleteOutputFiles: true,
                        failIfNotNew: false,
                        skipNoTestFiles: true,
                        stopProcessingIfError: true
                    )
                ]
            )
        }

        success {
            post_github_status("SUCCESS", "The build succeeded")
        }

        failure {
            post_github_status("FAILURE", "The build failed")
        }

        cleanup {
            deleteDir()
        }
    }
}
