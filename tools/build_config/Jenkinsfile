#!groovy
/**
 * The following parameters must be provided by the Jenkins build job and must match available application
 * on the build target machine
 *
 *  - CMAKE_VERSION: The version of CMake to run the build with
 *  - GCC_VERSION: The version of GCC to build with
 *  - MATLAB_VERSION: The release number of the Matlab to load
 *  - CPPCHECK_VERSION: The version of CppCheck tooling to load to provide the code-style checks
 */

def post_github_status(String state, String message) {
  // Non-PR builds will not set PR_STATUSES_URL - in which case we do not
  // want to post any statuses to Git
  if (env.PR_STATUSES_URL) {
    script {
      withCredentials([string(credentialsId: 'GitHub_API_Token',
          variable: 'api_token')]) {
        if (isUnix()) {
          sh """
            curl -H "Authorization: token ${api_token}" \
              --request POST \
              --data '{"state": "${state}", \
                  "description": "${message}", \
                  "target_url": "$BUILD_URL", \
                  "context": "$JOB_BASE_NAME"}' \
              $PR_STATUSES_URL > /dev/null
          """
        }
        else {
          powershell """
            [Net.ServicePointManager]::SecurityProtocol = "tls12, tls11, tls"
            \$payload = @{
              "state" = "${state}";
              "description" = "${message}";
              "target_url" = "$BUILD_URL";
              "context" = "$JOB_BASE_NAME"}

            Invoke-RestMethod -URI "$PR_STATUSES_URL" \
              -Headers @{Authorization = "token ${api_token}"} \
              -Method 'POST' \
              -Body (\$payload|ConvertTo-JSON) \
              -ContentType "application/json"
          """
        }
      }
    }
  }
}

def write_git_revision_to_file(String file_name) {
  script {
    def git_rev_cmd = "git rev-parse HEAD"
    echo "Writing Git revision to ${file_name}..."
    if (isUnix()) {
      sh """
        echo "\$(${git_rev_cmd})" > ${file_name}
      """
    } else {
      powershell """
        Write-Output "\$(${git_rev_cmd})" > ${file_name}
      """
    }
  }
}

if (env.BRANCH_NAME) {
  currentBuild.description = "Branch: ${env.BRANCH_NAME}"
} else if (env.PR_NUMBER) {
  currentBuild.displayName = "#${env.BUILD_NUMBER} PR-${env.PR_NUMBER}"
  currentBuild.description = "Git-SHA: ${env.PR_COMMIT_SHA.take(7)}"
}


pipeline {
  agent {
    label env.AGENT
  }

  stages {

    stage('Notify') {
      steps {
        post_github_status("pending", "The build is running")
      }
    }

    stage('Analyze') {
      steps {
        script {
          if (isUnix()) {
            sh '''
              module load cmake/\$CMAKE_VERSION &&
              module load matlab/\$MATLAB_VERSION &&
              module load gcc/\$GCC_VERSION &&
              module load cppcheck/\$CPPCHECK_VERSION &&
              ./tools/build_config/build.sh --print_versions --analyze
            '''
          }
          else {
            powershell '''
              ./tools/build_config/build.ps1 -print_versions

              Write-Output \"Static Analysis in not performed on Windows\"
            '''
          }
        }
      }
    }

    stage('Build') {
      steps {
        script {
          if (isUnix()) {
            sh '''
              module load cmake/\$CMAKE_VERSION &&
              module load matlab/\$MATLAB_VERSION &&
              module load gcc/\$GCC_VERSION &&
              ./tools/build_config/build.sh --build \
                  --cmake_flags "-DHerbert_RELEASE_TYPE=$RELEASE_TYPE" \
                  --matlab_release \$MATLAB_VERSION
            '''
          }
          else {
            powershell '''
              ./tools/build_config/build.ps1 -build \
                  -cmake_flags "-DHerbert_RELEASE_TYPE=\$env:RELEASE_TYPE" \
                  -matlab_release \$env:MATLAB_VERSION
            '''
          }
        }
      }
    }

    stage('Test') {
      steps {
        script {
          if (isUnix()) {
            sh '''
              module load cmake/\$CMAKE_VERSION &&
              module load matlab/\$MATLAB_VERSION &&
              module load gcc/\$GCC_VERSION &&
              ./tools/build_config/build.sh --test
            '''
          }
          else {
            powershell '''
              ./tools/build_config/build.ps1 -test
            '''
          }
        }
      }
    }

    stage('Package') {
      steps {
        script {
          if (isUnix()) {
            sh '''
              module load cmake/\$CMAKE_VERSION &&
              ./tools/build_config/build.sh --package
            '''
          }
          else {
            powershell '''
              ./tools/build_config/build.ps1 -package
            '''
          }
          // Create a file containing the git revision being built. This
          // enables the Deploy pipelines to validate against this SHA, and
          // ensure the correct revision is tagged in Git.
          if (get_build_type(env.JOB_BASE_NAME) == "Release") {
            def git_rev_file_name = "${env.JOB_BASE_NAME}-git-revision.sha"
            write_git_revision_to_file(git_rev_file_name)
          }
        }

        // Archive the release package and Git SHA file (if it exists)
        archiveArtifacts(
          artifacts: "build/Herbert-*,${git_rev_file_name}",
          fingerprint: true
        )
      }
    }
  }

  post {
    always {
      // archive CTest results file and static analysis report
      archiveArtifacts(
        artifacts: 'build/Testing/**/*.xml,**/cppcheck.xml',
        fingerprint: true
      )

      publishCppcheck (
        displayAllErrors: true,
        allowNoReport: true,
        pattern: '**/cppcheck.xml'
      )

      xunit (
        testTimeMargin: '3000',
        thresholdMode: 1,
        thresholds: [
          skipped(failureThreshold: '0'),
          failed(failureThreshold: '0')
        ],
        tools: [
          CTest(
            pattern: 'build/Testing/**/*.xml',
            deleteOutputFiles: true,
            failIfNotNew: false,
            skipNoTestFiles: true,
            stopProcessingIfError: true
          )
        ]
      )
    }

    success {
      post_github_status("success", "The build succeeded")
    }

    unsuccessful {
      post_github_status("failure", "The build failed")
    }

    cleanup {
      deleteDir()
    }
  }
}
