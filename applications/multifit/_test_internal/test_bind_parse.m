function test_bind_parse

% =============================================================================================================
% Should work...
% =============================================================================================================

% Single binding descriptor
% ----------------------------------------
[ok,mess,ipb,ifunb,ipf,ifunf,R] = testgateway(mfclass,'bind_parse', [4,4,4,4], [3,3,3,3], true, [1,2,3,4], {});
assert_ok (ok, mess, [ipb,ifunb,ipf,ifunf,R], zeros(0,5))

[ok,mess,ipb,ifunb,ipf,ifunf,R] = testgateway(mfclass,'bind_parse', [4,4,4,4], [3,3,3,3], true, [1,2,3,4], []);
assert_ok (ok, mess, [ipb,ifunb,ipf,ifunf,R], zeros(0,5))

[ok,mess,ipb,ifunb,ipf,ifunf,R] = testgateway(mfclass,'bind_parse', [4,4,4,4], [3,3,3,3], true, [1,2,3,4], {3,2,12.3});
res = [...
    3.0000    1.0000    2.0000    1.0000   12.3000;...
    3.0000    2.0000    2.0000    2.0000   12.3000;...
    3.0000    3.0000    2.0000    3.0000   12.3000;...
    3.0000    4.0000    2.0000    4.0000   12.3000;...
    ];
assert_ok (ok, mess, [ipb,ifunb,ipf,ifunf,R], res)

[ok,mess,ipb,ifunb,ipf,ifunf,R] = testgateway(mfclass,'bind_parse', [4,5,9,2], [2,3,1,1], true, 3, {8,[2,1],NaN});
assert_ok (ok, mess, [ipb,ifunb,ipf,ifunf,R], [8,3,2,1,NaN])

[ok,mess,ipb,ifunb,ipf,ifunf,R] = testgateway(mfclass,'bind_parse', [4,5,9,2], [2,3,1,1], true, 3, {{8,[2,1],NaN}});
assert_ok (ok, mess, [ipb,ifunb,ipf,ifunf,R], [8,3,2,1,NaN])

[ok,mess,ipb,ifunb,ipf,ifunf,R] = testgateway(mfclass,'bind_parse', [4,5,9,2], [2,3,1,1], true, 3, {8,2,NaN});
assert_ok (ok, mess, [ipb,ifunb,ipf,ifunf,R], [8,3,2,3,NaN])

[ok,mess,ipb,ifunb,ipf,ifunf,R] = testgateway(mfclass,'bind_parse', [4,5,9,2], [2,3,1,1], true, 3, {8,[3,-2],NaN});
assert_ok (ok, mess, [ipb,ifunb,ipf,ifunf,R], [8,3,3,-2,NaN])

[ok,mess,ipb,ifunb,ipf,ifunf,R] = testgateway(mfclass,'bind_parse', [4,5,9,2], [2,3,1,1], false, 2, {3,[4,-2],NaN});
assert_ok (ok, mess, [ipb,ifunb,ipf,ifunf,R], [3,-2,4,2,NaN])

[ok,mess,ipb,ifunb,ipf,ifunf,R] = testgateway(mfclass,'bind_parse', [4,5,9,2], [2,3,1,1], true, [1,2], {3,[4,3],NaN});
res = [...
    3,1,4,3,NaN;...
    3,2,4,3,NaN;...
    ];
assert_ok (ok, mess, [ipb,ifunb,ipf,ifunf,R], res)

[ok,mess,ipb,ifunb,ipf,ifunf,R] = testgateway(mfclass,'bind_parse', [4,5,9,2], [2,3,1,1], true, [1,2,3], {3,[3,1],NaN});
res = [...
    3,2,3,1,NaN;...
    3,3,3,1,NaN;...
    ];
assert_ok (ok, mess, [ipb,ifunb,ipf,ifunf,R], res)

[ok,mess,ipb,ifunb,ipf,ifunf,R] = testgateway(mfclass,'bind_parse', [4,5,9,6], [5,3,1,1], true, [1,2,3,4], {3,2,NaN});
res = [...
    3,1,2,1,NaN;...
    3,2,2,2,NaN;...
    3,3,2,3,NaN;...
    3,4,2,4,NaN;...
    ];
assert_ok (ok, mess, [ipb,ifunb,ipf,ifunf,R], res)

[ok,mess,ipb,ifunb,ipf,ifunf,R] = testgateway(mfclass,'bind_parse', [4,5,9,6], [5,3,1,1], true, [1,2], {3,-2,NaN});
res = [...
    3,1,2,-1,NaN;...
    3,2,2,-2,NaN;...
    ];
assert_ok (ok, mess, [ipb,ifunb,ipf,ifunf,R], res)

[ok,mess,ipb,ifunb,ipf,ifunf,R] = testgateway(mfclass,'bind_parse', [4,5,9,6], [5,3,1,1], false, [1,2], {1,-4,NaN});
res = [...
    1,-1,4,1,NaN;...
    1,-2,4,2,NaN;...
    ];
assert_ok (ok, mess, [ipb,ifunb,ipf,ifunf,R], res)

[ok,mess,ipb,ifunb,ipf,ifunf,R] = testgateway(mfclass,'bind_parse', [4,5,9,6], [5,3,1,1], true, [1,2,3,4], {3,4,NaN});
res = [...
    3,1,4,1,NaN;...
    3,2,4,2,NaN;...
    3,3,4,3,NaN;...
    3,4,4,4,NaN;...
    ];
assert_ok (ok, mess, [ipb,ifunb,ipf,ifunf,R], res)

[ok,mess,ipb,ifunb,ipf,ifunf,R] = testgateway(mfclass,'bind_parse', [4,5,9,6], [5,8,7,6], true, [1,2,3,4], {3,-5,NaN});
res = [...
    3,1,5,-1,NaN;...
    3,2,5,-2,NaN;...
    3,3,5,-3,NaN;...
    3,4,5,-4,NaN;...
    ];
assert_ok (ok, mess, [ipb,ifunb,ipf,ifunf,R], res)


% Multiple binding descriptors
% ----------------------------------------
[ok,mess,ipb,ifunb,ipf,ifunf,R] = testgateway(mfclass,'bind_parse', [4,5,9,6], [5,3,4,1], true, [1,2,3], {{3,[3,1],NaN},{3,-2,NaN}});
res = [...
    3,2,3,1,NaN;...
    3,3,3,1,NaN;...
    3,1,2,-1,NaN;...
    3,2,2,-2,NaN;...
    3,3,2,-3,NaN;...
    ];
assert_ok (ok, mess, [ipb,ifunb,ipf,ifunf,R], res)

% Local foregrounds and backgrounds, but the same function in each case
[ok,mess,ipb,ifunb,ipf,ifunf,R] = testgateway(mfclass,'bind_parse', [4,4,4,4], [3,3,3,3], true, [1,2,3,4],...
    {{1,[1,1]},{3,[3,1]},{2,-3}});
res = [...
     1     2     1     1   NaN;...
     1     3     1     1   NaN;...
     1     4     1     1   NaN;...
     3     2     3     1   NaN;...
     3     3     3     1   NaN;...
     3     4     3     1   NaN;...
     2     1     3    -1   NaN;...
     2     2     3    -2   NaN;...
     2     3     3    -3   NaN;...
     2     4     3    -4   NaN;...
    ];
assert_ok (ok, mess, [ipb,ifunb,ipf,ifunf,R], res)


% =============================================================================================================
% Should fail...
% =============================================================================================================

% Single binding descriptor
% ----------------------------------------
[ok,mess,ipb,ifunb,ipf,ifunf,R] = testgateway(mfclass,'bind_parse', [4,4,4,4], [3,3,3,3], true, [1,2,3,4], {3});
assert_bad (ok, mess, [ipb,ifunb,ipf,ifunf,R])

[ok,mess,ipb,ifunb,ipf,ifunf,R] = testgateway(mfclass,'bind_parse', [4,5,9,2], [2,3,1,1], true, 3, {8,[5,1],NaN});
assert_bad (ok, mess, [ipb,ifunb,ipf,ifunf,R])

[ok,mess,ipb,ifunb,ipf,ifunf,R] = testgateway(mfclass,'bind_parse', [4,5,9,2], [2,3,1,1], true, 3, {8, [5,1]});
assert_bad (ok, mess, [ipb,ifunb,ipf,ifunf,R])

[ok,mess,ipb,ifunb,ipf,ifunf,R] = testgateway(mfclass,'bind_parse', [4,5,9,2], [2,3,1,1], true, 3, {[1,2],2,NaN});
assert_bad (ok, mess, [ipb,ifunb,ipf,ifunf,R])

[ok,mess,ipb,ifunb,ipf,ifunf,R] = testgateway(mfclass,'bind_parse', [4,5,9,2], [2,3,1], true, 3, {8,[4,-2],NaN});
assert_bad (ok, mess, [ipb,ifunb,ipf,ifunf,R])

[ok,mess,ipb,ifunb,ipf,ifunf,R] = testgateway(mfclass,'bind_parse', [4,5,9,6], [5,3,1,1], true, [1,2,3,4], {3,5,NaN});
assert_bad (ok, mess, [ipb,ifunb,ipf,ifunf,R])

[ok,mess,ipb,ifunb,ipf,ifunf,R] = testgateway(mfclass,'bind_parse', [4,5,9,6], [5,3,1,1], true, [1,2,3,4], {3,5,NaN});
assert_bad (ok, mess, [ipb,ifunb,ipf,ifunf,R])

[ok,mess,ipb,ifunb,ipf,ifunf,R] = testgateway(mfclass,'bind_parse', [4,5,9,6], [5,3,1,1], true, [1,2,3,4], {3,-2,NaN});
assert_bad (ok, mess, [ipb,ifunb,ipf,ifunf,R])


%----------------------------------------------------------------------------------------------------------
function assert_ok (ok,mess,out,out_ref)
if ok
    if ~isequaln(out,out_ref)
        disp(out_ref)
        disp(out)
        error('Output doesnt match expectation')
    end
else
    error(mess)
end

function assert_bad (ok,mess,out)
if ok
    disp(out)
    error('Should have failed')
end
