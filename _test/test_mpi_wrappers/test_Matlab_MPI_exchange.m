classdef test_Matlab_MPI_exchange < MPI_Test_Common
    
    properties
    end
    methods
        %
        function obj = test_Matlab_MPI_exchange(name)
            if ~exist('name', 'var')
                name = 'test_Matlab_MPI_exchange';
            end
            obj = obj@MPI_Test_Common(name);
        end
        function test_JobExecutor_canceled(~)
            serverfbMPI = MessagesFilebased('test_JE_Parpool_canceled');
            serverfbMPI.mess_exchange_folder = tmp_dir;
            
            [data_exchange_folder, JOB_id] = fileparts(serverfbMPI.mess_exchange_folder);
            cs = iMessagesFramework.build_worker_init(fileparts(data_exchange_folder), ...
                JOB_id, 'MessagesMatlabMPI_tester', 1, 3, true);
            
            % intercom constructor invoked here.
            [fbMPI, intercomm] = JobExecutor.init_frameworks(cs);
            clob1 = onCleanup(@()(finalize_all(intercomm)));
            clob2 = onCleanup(@()(finalize_all(fbMPI)));
            assertTrue(isa(intercomm, 'MessagesParpool'));
            assertEqual(intercomm.labIndex, 1);
            assertEqual(intercomm.numLabs, 3);
            
            
            % send fake messages, presumably generated by workers 2 and 3
            % JE will not run if not received these messages.
            m1 = aMessage('started');
            m1.payload = 'a';
            [ok, err_mess] = intercomm.send_message(2, m1);
            assertEqual(ok, MESS_CODES.ok, ['Error: ', err_mess]);
            m1.payload = 'b';
            [ok, err_mess] = intercomm.send_message(3, m1);
            assertEqual(ok, MESS_CODES.ok, ['Error: ', err_mess]);
            
            
            je = JETester();
            common_job_param = struct('filepath', data_exchange_folder, ...
                'filename_template', 'test_jobDispatcherL%d_nf%d.txt', ...
                'fail_for_labsN', 2:3);
            im = InitMessage(common_job_param, 1, 1, 1);
            
            je = je.init(fbMPI, intercomm, im, true);
            
            % send fake 'canceled' messages, presumably generated by worker 2
            intercomm.send_message(2,'canceled');
            
            is = je.is_job_canceled();
            assertTrue(is);
            
        end
        %
        function test_JobExecutor(~)
            serverfbMPI = MessagesFilebased('test_JE_Parpool');
            serverfbMPI.mess_exchange_folder = tmp_dir;
            
            [data_exchange_folder, JOB_id] = fileparts(serverfbMPI.mess_exchange_folder);
            cs = iMessagesFramework.build_worker_init(fileparts(data_exchange_folder), ...
                JOB_id, 'MessagesMatlabMPI_tester', 1, 3, true);
            
            % intercom constructor invoked here.
            [fbMPI, intercomm] = JobExecutor.init_frameworks(cs);
            clob1 = onCleanup(@()(finalize_all(intercomm)));
            clob2 = onCleanup(@()(finalize_all(fbMPI)));
            assertTrue(isa(intercomm, 'MessagesParpool'));
            assertEqual(intercomm.labIndex, 1);
            assertEqual(intercomm.numLabs, 3);
            
            
            % send fake messages, presumably generated by workers 2 and 3
            % JE will not run if not received these messages.
            m1 = aMessage('started');
            m1.payload = 'a';
            [ok, err_mess] = intercomm.send_message(2, m1);
            assertEqual(ok, MESS_CODES.ok, ['Error: ', err_mess]);
            m1.payload = 'b';
            [ok, err_mess] = intercomm.send_message(3, m1);
            assertEqual(ok, MESS_CODES.ok, ['Error: ', err_mess]);
            
            
            je = JETester();
            common_job_param = struct('filepath', data_exchange_folder, ...
                'filename_template', 'test_jobDispatcherL%d_nf%d.txt', ...
                'fail_for_labsN', 2:3);
            im = InitMessage(common_job_param, 1, 1, 1);
            % receive 'started' messages from all nodes reduce then and return
            % 'started' message to control node.
            je = je.init(fbMPI, intercomm, im, true);
            is = je.is_job_canceled();
            assertFalse(is);
            je.log_progress(0, 9, 0, []);
            
            [ok, err_mess, message] = serverfbMPI.receive_message(1, 'started');
            assertEqual(ok, MESS_CODES.ok, ['Error: ', err_mess]);
            assertEqual(message.mess_name, 'started')
            assertEqual(numel(message.payload), 3);
            assertTrue(isempty(message.payload{1}));
            assertEqual(message.payload{2}, 'a');
            assertEqual(message.payload{3}, 'b');
            %--------------------------------------------------------------
            mess = LogMessage(0, 10, 1, '2');
            [ok, err] = intercomm.send_message(2, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            mess = LogMessage(1, 10, 1, '3');
            [ok, err] = intercomm.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            
            je.log_progress(1, 9, 2, '1');
            
            [ok, err_mess, message] = serverfbMPI.receive_message(1, 'log');
            assertEqual(ok, MESS_CODES.ok, ['Error: ', err_mess]);
            assertEqual(message.mess_name, 'log');
            assertEqual(numel(message.worker_logs), 3);
            assertTrue(iscell(message.worker_logs));
            
            mess = CompletedMessage();
            mess.payload = 'Job 2 has been completed';
            [ok, err] = intercomm.send_message(2, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            mess = FailedMessage('Test Failure from Node 3');
            [ok, err] = intercomm.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            
            
            [ok, err_mess] = je.finish_task();
            assertEqual(ok, true, ['Error: ', err_mess]);
            [ok, err_mess, message] = serverfbMPI.receive_message(1, 'log');
            assertEqual(ok, MESS_CODES.ok, ['Error: ', err_mess]);
            assertEqual(message.mess_name, 'failed');
            assertEqual(numel(message.payload), 3);
        end
        %
        function test_receive_all_mess(~)
            
            mf = MessagesMatlabMPI_tester(1,3);
            clob = onCleanup(@()(finalize_all(mf)));
            assertEqual(mf.labIndex, 1);
            assertEqual(mf.numLabs, 3);
            
            mess = LogMessage(0, 10, 1, '0');
            % CPP_MPI messages in test mode are "reflected" from target node
            [ok, err] = mf.send_message(2, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            [ok, err] = mf.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            
            [all_mess, task_ids] = mf.receive_all('any', 'any');
            assertEqual(numel(all_mess), 2);
            assertEqual(numel(task_ids), 2);
            assertEqual(task_ids, [2, 3]);
        end
        %
        function test_SendReceive(~)
            
            mf = MessagesMatlabMPI_tester();
            clob = onCleanup(@()(finalize_all(mf)));
            assertEqual(mf.labIndex, 1);
            assertEqual(mf.numLabs, 10);
            
            
            mess = LogMessage(1, 10, 1, []);
            [ok, err_mess] = mf.send_message(5, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            [ok, err_mess, messR] = mf.receive_message(5, mess.mess_name);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            assertEqual(mess, messR);
            
            [all_messages,task_ids] = mf.receive_all('any');
            assertTrue(isempty(all_messages));
            assertTrue(isempty(task_ids));
            
            % blocking receive in test mode is not alowed
            [ok, err_mess, messR] = mf.receive_message(5, 'init');
            assertEqual(ok, MESS_CODES.a_recieve_error);
            assertTrue(isempty(messR));
            assertEqual(err_mess.identifier, 'MATLAB_MPI_WRAPPER:runtime_error');
            
            
            [ok, err_mess] = mf.send_message(4, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            [ok, err_mess, messR] = mf.receive_message(4, 'any');
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            assertEqual(mess, messR);
            
            [ok, err_mess] = mf.send_message(6, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            [ok, err_mess, messR] = mf.receive_message('any', 'any');
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            assertEqual(mess, messR);
        end
        %
        function test_Send3Receive1Asynch(~)
            
            mf = MessagesMatlabMPI_tester();
            clob = onCleanup(@()(finalize_all(mf)));
            assertEqual(mf.labIndex, 1);
            assertEqual(mf.numLabs, 10);
            
            mess = LogMessage(1, 10, 1, []);
            [ok, err_mess] = mf.send_message(5, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            mess = LogMessage(2, 10, 3, []);
            [ok, err_mess] = mf.send_message(5, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            mess = LogMessage(3, 10, 5, []);
            [ok, err_mess] = mf.send_message(5, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            [ok, err_mess, messR] = mf.receive_message(5, mess.mess_name);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            assertEqual(mess, messR);
            
            [mess_names, source_id_s] = mf.probe_all(5, 'any');
            assertTrue(isempty(mess_names));
            assertTrue(isempty(source_id_s));
            
        end
        %
        function test_SendProbe(~)
            % Test communications in test mode
            mf = MessagesMatlabMPI_tester();
            clob = onCleanup(@()(finalize_all(mf)));
            assertEqual(mf.labIndex, 1);
            assertEqual(mf.numLabs, 10);
            
            mess = LogMessage(1, 10, 1, []);
            [ok, err_mess] = mf.send_message(5, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            [mess_names, source_id_s] = mf.probe_all('any', 'any');
            assertEqual(numel(mess_names), 1);
            assertEqual(numel(source_id_s), 1);
            assertEqual(source_id_s(1), 5);
            assertEqual(mess_names{1}, mess.mess_name);
            
            [ok, err_mess] = mf.send_message(7, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            [mess_names, source_id_s] = mf.probe_all('any', 'any');
            assertEqual(numel(mess_names), 2);
            assertEqual(numel(source_id_s), 2);
            assertEqual(source_id_s(1), 5);
            assertEqual(source_id_s(2), 7);
            assertEqual(mess_names{1}, mess.mess_name);
            
        end
        %
        function test_MessagesMatlabMPI_two_mess_test_mode(~)
            mf = MessagesMatlabMPI_tester(2,6);
            clob = onCleanup(@()(finalize_all(mf)));
            
            assertTrue(mf.is_tested);
            
            assertEqual(mf.labIndex, 2);
            % fake numLabs, generated by tester.
            assertEqual(mf.numLabs, 6);
            %
            % get real lab-indexes, initiated in test mode.
            mpi_wrapper = mf.get_mpi_wrapper();
            
            assertTrue(mpi_wrapper.is_tested);
            assertEqual(mpi_wrapper.numLabs, 6);
            assertEqual(mpi_wrapper.labIndex, 2);
            
            mess1 = LogMessage(1,10,0);
            mess2 = FailedMessage('test failure');
            mpi_wrapper.mlabSend(mess1,5);
            mpi_wrapper.mlabSend(mess2,5);
            [avail,tag,source]=mpi_wrapper.mlabProbe(5);
            assertTrue(avail)
            assertEqual(tag,mess1.tag);
            assertEqual(source,5);
            [avail,tag,source]=mpi_wrapper.mlabProbe([]);
            assertTrue(avail)
            assertEqual(tag,mess1.tag);
            assertEqual(source,5);
            
            [mess_r,tag,source]=mpi_wrapper.mlabReceive(5);
            assertEqual(mess_r,mess1);
            assertEqual(tag,mess1.tag);
            assertEqual(source,5);
            [avail,tag,source]=mpi_wrapper.mlabProbe(5);
            assertTrue(avail)
            assertEqual(tag,mess2.tag);
            assertEqual(source,5);
            
            [mess_r,tag,source]=mpi_wrapper.mlabReceive(5);
            assertEqual(mess_r,mess2);
            assertEqual(tag,mess2.tag);
            assertEqual(source,5);
            
            
        end
        %
        function test_MessagesMatlabMPI_one_mess_test1_send_receive(~)
            mf = MessagesMatlabMPI_tester();
            clob = onCleanup(@()(finalize_all(mf)));
            
            mess = LogMessage(1,10,0);
            tag = mess.tag;
            
            mpi_wrapper = mf.get_mpi_wrapper();
            mpi_wrapper.mlabSend(mess,2);
            assertExceptionThrown(@()mlabReceive(mpi_wrapper,2,tag+1),...
                'MATLAB_MPI_WRAPPER:runtime_error',...
                'Should throw when trying to receive message wotj wrong tag');
            [mess_r,tag_r,source]=mpi_wrapper.mlabReceive(2,tag);
            assertEqual(mess_r,mess);
            assertEqual(tag_r,mess.tag);
            assertEqual(source,2);
            
            
            mpi_wrapper.mlabSend(mess,2);
            [mess_r,tag,source]=mpi_wrapper.mlabReceive(2);
            assertEqual(mess_r,mess);
            assertEqual(tag,mess.tag);
            assertEqual(source,2);
            
            assertExceptionThrown(@()mlabReceive(mpi_wrapper,2),...
                'MATLAB_MPI_WRAPPER:runtime_error',...
                'Should throw when trying to receive non-exising message in test mode');
            
        end
        %
        function test_MessagesMatlabMPI_one_mess_test1(~)
            mf = MessagesMatlabMPI_tester();
            clob = onCleanup(@()(finalize_all(mf)));
            
            assertTrue(mf.is_tested);
            
            assertEqual(mf.labIndex, 1);
            % fake numLabs, generated by tester.
            assertEqual(mf.numLabs, 10);
            %
            % get real lab-indexes, initiated in test mode.
            mpi_wrapper = mf.get_mpi_wrapper();
            
            assertTrue(mpi_wrapper.is_tested);
            assertEqual(mpi_wrapper.numLabs, 10);
            assertEqual(mpi_wrapper.labIndex, 1);
            
            mess = LogMessage(1,10,0);
            mpi_wrapper.mlabSend(mess,5);
            [avail,tag,source]=mpi_wrapper.mlabProbe(5);
            assertTrue(avail)
            assertEqual(tag,mess.tag);
            assertEqual(source,5);
            [avail,tag,source]=mpi_wrapper.mlabProbe(6);
            assertFalse(avail)
            assertTrue(isempty(tag));
            assertEqual(source,6);
            
            [avail,tag,source]=mpi_wrapper.mlabProbe([]);
            assertTrue(avail)
            assertEqual(tag,mess.tag);
            assertEqual(source,5);
            
            [mess_r,tag,source]=mpi_wrapper.mlabReceive([]);
            assertEqual(mess_r,mess);
            assertEqual(tag,mess.tag);
            assertEqual(source,5);
            
            [avail,tag,source]=mpi_wrapper.mlabProbe(5);
            assertFalse(avail)
            assertTrue(isempty(tag));
            assertEqual(source,5);
            
            [avail,tag,source]=mpi_wrapper.mlabProbe([]);
            assertFalse(avail)
            assertTrue(isempty(tag));
            assertTrue(isempty(source));
            
        end
    end
end
