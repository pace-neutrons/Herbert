classdef exchange_common_tests < MPI_Test_Common
    % Class to test common interface for all MPI frameworks used by Herbert
    %
    
    properties
        % the name of the class, responsible for sending/receiving framework
        % messages in test mode
        comm_name
        % the field, containing structure, used as input for different tests
        tests_control_strcut
        % Temporarty property, used to compensate the fact that Matlab MPI
        % can not return tag of the message, requested with 'any'
        mess_name_fix
    end
    
    methods
        function obj = exchange_common_tests(test_name,comm_name,fw_name,tcs)
            obj = obj@MPI_Test_Common(test_name,fw_name);
            obj.comm_name   = comm_name;
            obj.tests_control_strcut = tcs;
        end
        %
        function test_JobExecutor_cancelled(obj)
            % the logic of jobExecutor processing cancelled message is
            % tested here.
            %
            serverfbMPI = MessagesFilebased(['test_JE_',obj.cluster_name,'_cancelled']);
            serverfbMPI.mess_exchange_folder = tmp_dir;
            
            [data_exchange_folder, JOB_id] = fileparts(serverfbMPI.mess_exchange_folder);
            cs = iMessagesFramework.build_worker_init(fileparts(data_exchange_folder), ...
                JOB_id, obj.comm_name, 1, 3, true);
            
            % intercom constructor invoked here.
            [fbMPI, intercomm] = JobExecutor.init_frameworks(cs);
            clob1 = onCleanup(@()(finalize_all(intercomm)));
            clob2 = onCleanup(@()(finalize_all(fbMPI)));
            assertTrue(isa(intercomm, obj.comm_name));
            assertEqual(double(intercomm.labIndex), 1);
            assertEqual(double(intercomm.numLabs), 3);
            
            
            % send fake messages, presumably generated by workers 2 and 3
            % JE will not run if not received these messages.
            m1 = aMessage('started');
            m1.payload = 'a';
            [ok, err_mess] = intercomm.send_message(2, m1);
            assertEqual(ok, MESS_CODES.ok, ['Error: ', err_mess]);
            m1.payload = 'b';
            [ok, err_mess] = intercomm.send_message(3, m1);
            assertEqual(ok, MESS_CODES.ok, ['Error: ', err_mess]);
            
            
            je = JETester();
            common_job_param = struct('filepath', data_exchange_folder, ...
                'filename_template', 'test_jobDispatcherL%d_nf%d.txt', ...
                'fail_for_labsN', 2:3);
            im = InitMessage(common_job_param, 1, 1, 1);
            
            je = je.init(fbMPI, intercomm, im, true);
            
            % send fake 'cancelled' messages, presumably generated by worker 2
            intercomm.send_message(2,'cancelled');
            
            is = je.is_job_cancelled();
            assertTrue(is);
            
        end
        %
        function test_JobExecutor_slave_failed_master_cancelled(obj)
            % Substantial part of parallel worker logic, related to jobExecutor
            % initialization and completeon operations is tested here.
            %
            if obj.ignore_test
                return
            end
            
            
            serverfbMPI = MessagesFilebased(['test_JE_',obj.cluster_name]);
            serverfbMPI.mess_exchange_folder = tmp_dir;
            
            [data_exchange_folder, JOB_id] = fileparts(serverfbMPI.mess_exchange_folder);
            cs = iMessagesFramework.build_worker_init(fileparts(data_exchange_folder), ...
                JOB_id, obj.comm_name, 1, 3, true);
            
            % intercom constructor invoked here.
            [fbMPI, intercomm] = JobExecutor.init_frameworks(cs);
            clob1 = onCleanup(@()(finalize_all(intercomm)));
            clob2 = onCleanup(@()(finalize_all(fbMPI)));
            assertTrue(isa(intercomm,obj.comm_name));
            assertEqual(double(intercomm.labIndex), 1);
            assertEqual(double(intercomm.numLabs), 3);
            
            
            % send fake messages, presumably generated by workers 2 and 3
            % JE will not run if not received these messages.
            m1 = aMessage('started');
            m1.payload = 'a';
            [ok, err_mess] = intercomm.send_message(2, m1);
            assertEqual(ok, MESS_CODES.ok, ['Error: ', err_mess]);
            m1.payload = 'b';
            [ok, err_mess] = intercomm.send_message(3, m1);
            assertEqual(ok, MESS_CODES.ok, ['Error: ', err_mess]);
            
            
            je = JETester();
            common_job_param = struct('filepath', data_exchange_folder, ...
                'filename_template', 'test_jobDispatcherL%d_nf%d.txt', ...
                'fail_for_labsN', 2:3);
            im = InitMessage(common_job_param, 1, 1, 1);
            % receive 'started' messages from all nodes reduce then and return
            % 'started' message to control node.
            je = je.init(fbMPI, intercomm, im, true);
            is = je.is_job_cancelled();
            assertFalse(is);
            je.log_progress(0, 9, 0, []);
            
            [ok, err_mess, message] = serverfbMPI.receive_message(1, 'started');
            assertEqual(ok, MESS_CODES.ok, ['Error: ', err_mess]);
            assertEqual(message.mess_name, 'started')
            assertEqual(numel(message.payload), 3);
            assertTrue(isempty(message.payload{1}));
            assertEqual(message.payload{2}, 'a');
            assertEqual(message.payload{3}, 'b');
            %--------------------------------------------------------------
            mess = LogMessage(0, 10, 1, '2');
            [ok, err] = intercomm.send_message(2, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            mess = LogMessage(1, 10, 1, '3');
            [ok, err] = intercomm.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            
            je.log_progress(1, 9, 2, '1');
            
            [ok, err_mess, message] = serverfbMPI.receive_message(1, 'log');
            assertEqual(ok, MESS_CODES.ok, ['Error: ', err_mess]);
            assertEqual(message.mess_name, 'log');
            assertEqual(numel(message.worker_logs), 3);
            assertTrue(iscell(message.worker_logs));
            
            mess = LogMessage(5, 10, 1, '2');
            [ok, err] = intercomm.send_message(2, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            mess = LogMessage(5, 10, 1, '3');
            [ok, err] = intercomm.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            mess = LogMessage(6, 10, 1, '3');
            [ok, err] = intercomm.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            
            je.log_progress(5, 9, 2, '1');
            % Here is the end: node 2 completed
            mess = CompletedMessage();
            mess.payload = 'Job 2 has been completed';
            [ok, err] = intercomm.send_message(2, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            % Here is the end: node 3 Failed
            mess = FailedMessage('Test Failure from Node 3');
            [ok, err] = intercomm.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            
            try
                je.log_progress(6, 9, 2, '1');
                exception_thrown = false;
            catch ME
                exception_thrown = true;
                assertEqual(ME.identifier,'JOB_EXECUTOR:cancelled')
                assertTrue(strncmp(ME.message,'Task 1 has been cancelled at step 6#9',36))
            end
            assertTrue(exception_thrown,...
                ' log progress should throw "Cancelled" when failure is identified')
            
            mess = je.process_fail_state(ME);
            assertTrue(isa(mess,'FailedMessage'));
            [ok, err_mess] = je.finish_task(mess);
            assertEqual(ok, true, ['Error: ', err_mess]);
            
            [ok, err_mess, message] = serverfbMPI.receive_message(1, 'log');
            assertEqual(ok, MESS_CODES.ok, ['Error: ', err_mess]);
            assertEqual(message.mess_name, 'failed');
            assertTrue(iscell(message.payload));
            assertEqual(numel(message.payload), 3);
            assertEqual(message.payload{2},'Job 2 has been completed');
            assertTrue(isfield(message.payload{1},'fail_reason'))
            assertEqual(message.payload{1}.fail_reason,'Task N1 cancelled');
            assertTrue(isfield(message.payload{3},'fail_reason'))
            assertEqual(message.payload{3}.fail_reason,'Test Failure from Node 3');
        end
        %
        function test_JobExecutor(obj)
            % Substantial part of parallel worker logic, related to jobExecutor
            % initialization and completeon operations is tested here.
            %
            if obj.ignore_test
                return
            end
            
            
            serverfbMPI = MessagesFilebased(['test_JE_',obj.cluster_name]);
            serverfbMPI.mess_exchange_folder = tmp_dir;
            
            [data_exchange_folder, JOB_id] = fileparts(serverfbMPI.mess_exchange_folder);
            cs = iMessagesFramework.build_worker_init(fileparts(data_exchange_folder), ...
                JOB_id, obj.comm_name, 1, 3, true);
            
            % intercom constructor invoked here.
            [fbMPI, intercomm] = JobExecutor.init_frameworks(cs);
            clob1 = onCleanup(@()(finalize_all(intercomm)));
            clob2 = onCleanup(@()(finalize_all(fbMPI)));
            assertTrue(isa(intercomm,obj.comm_name));
            assertEqual(double(intercomm.labIndex), 1);
            assertEqual(double(intercomm.numLabs), 3);
            
            
            % send fake messages, presumably generated by workers 2 and 3
            % JE will not run if not received these messages.
            m1 = aMessage('started');
            m1.payload = 'a';
            [ok, err_mess] = intercomm.send_message(2, m1);
            assertEqual(ok, MESS_CODES.ok, ['Error: ', err_mess]);
            m1.payload = 'b';
            [ok, err_mess] = intercomm.send_message(3, m1);
            assertEqual(ok, MESS_CODES.ok, ['Error: ', err_mess]);
            
            
            je = JETester();
            common_job_param = struct('filepath', data_exchange_folder, ...
                'filename_template', 'test_jobDispatcherL%d_nf%d.txt', ...
                'fail_for_labsN', 2:3);
            im = InitMessage(common_job_param, 1, 1, 1);
            % receive 'started' messages from all nodes reduce then and return
            % 'started' message to control node.
            je = je.init(fbMPI, intercomm, im, true);
            is = je.is_job_cancelled();
            assertFalse(is);
            je.log_progress(0, 9, 0, []);
            
            [ok, err_mess, message] = serverfbMPI.receive_message(1, 'started');
            assertEqual(ok, MESS_CODES.ok, ['Error: ', err_mess]);
            assertEqual(message.mess_name, 'started')
            assertEqual(numel(message.payload), 3);
            assertTrue(isempty(message.payload{1}));
            assertEqual(message.payload{2}, 'a');
            assertEqual(message.payload{3}, 'b');
            %--------------------------------------------------------------
            mess = LogMessage(0, 10, 1, '2');
            [ok, err] = intercomm.send_message(2, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            mess = LogMessage(1, 10, 1, '3');
            [ok, err] = intercomm.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            
            je.log_progress(1, 9, 2, '1');
            
            [ok, err_mess, message] = serverfbMPI.receive_message(1, 'log');
            assertEqual(ok, MESS_CODES.ok, ['Error: ', err_mess]);
            assertEqual(message.mess_name, 'log');
            assertEqual(numel(message.worker_logs), 3);
            assertTrue(iscell(message.worker_logs));
            % step covers average of all logs steps, so characterises all
            % logs received.
            assertElementsAlmostEqual(message.step,0.6667,'absolute',1.e-4)
            
            %
            mess = LogMessage(1, 10, 1, '2');
            [ok, err] = intercomm.send_message(2, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            mess = DataMessage();
            mess.payload = 'd2';
            [ok, err] = intercomm.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            
            je.log_progress(2, 9, 2, '1');
            
            [ok, err_mess, message] = serverfbMPI.receive_message(1, 'log');
            assertEqual(ok, MESS_CODES.ok, ['Error: ', err_mess]);
            assertEqual(message.mess_name, 'log');
            assertEqual(numel(message.worker_logs), 2);
            assertTrue(iscell(message.worker_logs));
            
            
            mess = LogMessage(5, 10, 1, '2');
            [ok, err] = intercomm.send_message(2, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            mess = LogMessage(5, 10, 1, '3');
            [ok, err] = intercomm.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            mess = LogMessage(6, 10, 1, '3');
            [ok, err] = intercomm.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            
            je.log_progress(5, 9, 2, '1');
            
            [ok, err_mess, message] = serverfbMPI.receive_message(1, 'log');
            assertEqual(ok, MESS_CODES.ok, ['Error: ', err_mess]);
            assertEqual(message.mess_name, 'log');
            assertEqual(numel(message.worker_logs), 3);
            assertTrue(iscell(message.worker_logs));
            assertElementsAlmostEqual(message.step,5.3333,'absolute',1.e-4)
            
            mess = LogMessage(8, 10, 1, '2');
            [ok, err] = intercomm.send_message(2, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            mess = LogMessage(9, 10, 1, '2');
            [ok, err] = intercomm.send_message(2, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            mess = LogMessage(10, 10, 1, '2');
            [ok, err] = intercomm.send_message(2, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            
            
            mess = LogMessage(7, 10, 1, '3');
            [ok, err] = intercomm.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            mess = LogMessage(6, 10, 1, '3');
            [ok, err] = intercomm.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            
            je.log_progress(8, 9, 2, '1');
            %
            [ok, err_mess, message] = serverfbMPI.receive_message(1, 'log');
            assertEqual(ok, MESS_CODES.ok, ['Error: ', err_mess]);
            assertEqual(message.mess_name, 'log');
            assertEqual(numel(message.worker_logs), 3);
            assertTrue(iscell(message.worker_logs));
            assertElementsAlmostEqual(message.step,8,'absolute',1.e-4)
            
            c_mess = CompletedMessage();
            c_mess.payload = 'Job 2 has been completed';
            [ok, err] = intercomm.send_message(2, c_mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            
            mess = LogMessage(8, 10, 1, '3');
            [ok, err] = intercomm.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            mess = LogMessage(9, 10, 1, '3');
            [ok, err] = intercomm.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            
            je.log_progress(8, 9, 2, '1');
            
            [ok, err_mess, message] = serverfbMPI.receive_message(1, 'log');
            assertEqual(ok, MESS_CODES.ok, ['Error: ', err_mess]);
            assertEqual(message.mess_name, 'log');
            assertEqual(numel(message.worker_logs), 2);
            assertTrue(iscell(message.worker_logs));
            assertElementsAlmostEqual(message.step,8.5,'absolute',1.e-4)
            
            je.log_progress(9, 9, 2, '1');
            [ok, err_mess, message] = serverfbMPI.receive_message(1, 'log');
            assertEqual(ok, MESS_CODES.ok, ['Error: ', err_mess]);
            assertEqual(message.mess_name, 'log');
            assertEqual(numel(message.worker_logs), 1);
            assertTrue(iscell(message.worker_logs));
            assertElementsAlmostEqual(message.step,9,'absolute',1.e-4)
            
            je.log_progress(10, 9, 2, '1');
            %
            [ok, err_mess, message] = serverfbMPI.receive_message(1, 'log');
            assertEqual(ok, MESS_CODES.ok, ['Error: ', err_mess]);
            assertEqual(message.mess_name, 'log');
            assertEqual(numel(message.worker_logs), 1);
            assertTrue(iscell(message.worker_logs));
            assertElementsAlmostEqual(message.step,10,'absolute',1.e-4)
            
            mess = LogMessage(10, 10, 1, '3'); % this will be ignored and clearned up during finish_task
            [ok, err] = intercomm.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            c_mess.payload = 'Job 3 has been completed';
            [ok, err] = intercomm.send_message(3, c_mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            
            je.task_outputs = 'Job 1 has been completed';
            [ok, err_mess] = je.finish_task();
            assertEqual(ok, true, ['Error: ', err_mess]);
            [ok, err_mess, message] = serverfbMPI.receive_message(1, 'completed');
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err_mess])
            
            assertEqual(message.mess_name, 'completed');
            assertEqual(numel(message.payload), 3);
            assertEqual(message.payload{1}, 'Job 1 has been completed');
            assertEqual(message.payload{2}, 'Job 2 has been completed');
            assertEqual(message.payload{3}, 'Job 3 has been completed');
        end
        %
        function test_receive_all_some_from_cache(obj)
            if obj.ignore_test
                return
            end
            intercomm = feval(obj.comm_name,obj.tests_control_strcut);
            clob_s = onCleanup(@()(finalize_all(intercomm)));
            
            
            mess_l = LogMessage(0, 10, 1, '0');
            % CPP_MPI messages in test mode are "reflected" from target node
            [ok, err] = intercomm.send_message(2, mess_l);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            
            mess_d = DataMessage();
            mess_d.payload = 'a1';
            [ok, err] = intercomm.send_message(2, mess_d);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            mess_d.payload = 'a2';
            [ok, err] = intercomm.send_message(3, mess_d);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            
            mess_d.payload = 'b1';
            [ok, err] = intercomm.send_message(2, mess_d);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            mess_d.payload = 'b2';
            [ok, err] = intercomm.send_message(3, mess_d);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            
            %data a goes to cahce
            [all_mess, task_ids] = intercomm.receive_all('all', 'log');
            assertEqual(numel(all_mess), 1);
            assertEqual(numel(task_ids), 1);
            assertEqual(task_ids, 2);
            
            [all_mess, task_ids] = intercomm.receive_all('all', 'log');
            assertTrue(isempty(all_mess));
            assertTrue(isempty(task_ids));
            
            [ok, err] = intercomm.send_message(3, mess_l);
            assertEqual(ok, MESS_CODES.ok, ['Send  Error = ', err])
            
            
            [all_mess, task_ids] = intercomm.receive_all('all', 'log');
            assertEqual(numel(all_mess), 1);
            assertEqual(numel(task_ids), 1);
            assertEqual(task_ids, 3);
            
            
            mess_d.payload = 'c1';
            [ok, err] = intercomm.send_message(2, mess_d);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            mess_d.payload = 'c2';
            [ok, err] = intercomm.send_message(3, mess_d);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            
            [all_mess, task_ids] = intercomm.receive_all('all', 'data');
            assertEqual(numel(all_mess), 2);
            assertEqual(numel(task_ids), 2);
            assertEqual(task_ids, [2,3]);
            assertEqual(all_mess{1}.payload, 'a1');
            assertEqual(all_mess{2}.payload, 'a2');
            
            [all_mess, task_ids] = intercomm.receive_all('all', 'data');
            assertEqual(numel(all_mess), 2);
            assertEqual(numel(task_ids), 2);
            assertEqual(task_ids, [2,3]);
            assertEqual(all_mess{1}.payload, 'b1');
            assertEqual(all_mess{2}.payload, 'b2');
            
            mess_l = LogMessage(1, 10, 1, '0');
            [ok, err] = intercomm.send_message(2, mess_l);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            [ok, err] = intercomm.send_message(3, mess_l);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            
            mess_l = LogMessage(2, 10, 1, '0');
            [ok, err] = intercomm.send_message(2, mess_l);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            [ok, err] = intercomm.send_message(3, mess_l);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            
            
            mess_l = LogMessage(3, 10, 1, '0');
            [ok, err] = intercomm.send_message(2, mess_l);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            mess_l = LogMessage(4, 10, 1, '0');
            [ok, err] = intercomm.send_message(3, mess_l);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            
            
            [all_mess, task_ids] = intercomm.receive_all('all', 'data');
            assertEqual(numel(all_mess), 2);
            assertEqual(numel(task_ids), 2);
            assertEqual(task_ids, [2,3]);
            assertEqual(all_mess{1}.payload, 'c1');
            assertEqual(all_mess{2}.payload, 'c2');
            
            f = @()receive_all(intercomm,'all', 'data');
            assertExceptionThrown(f,'MESSAGES_FRAMEWORK:runtime_error',...
                'Receiving missing Blocking message should throw in test mode');
            
            [all_mess, task_ids] = intercomm.receive_all('all', 'log');
            assertEqual(numel(all_mess), 2);
            assertEqual(numel(task_ids), 2);
            assertEqual(task_ids, [2,3]);
            assertEqual(all_mess{1}.step, 3);
            assertEqual(all_mess{2}.step, 4);
        end
        %
        function test_receive_all_mess_choose_special(obj)
            if obj.ignore_test
                return
            end
            intercomm = feval(obj.comm_name,obj.tests_control_strcut);
            clob_s = onCleanup(@()(finalize_all(intercomm)));
            intercomm  = intercomm.set_framework_range(1,10);
            
            % asynchroneous receive
            mess = LogMessage(0, 10, 1, '0');
            % CPP_MPI messages in test mode are "reflected" from target node
            [ok, err] = intercomm.send_message(2, mess);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            [ok, err] = intercomm.send_message(5, mess);
            assertEqual(ok, MESS_CODES.ok, ['Send  Error = ', err])
            
            [all_mess, task_ids] = intercomm.receive_all(2:5, 'any');
            assertEqual(numel(all_mess), 2);
            assertEqual(numel(task_ids), 2);
            assertEqual(task_ids, [2,5]);
            
            
            mess = LogMessage(0, 10, 1, '0');
            % messages in test mode are "reflected" from target node
            [ok, err] = intercomm.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            [ok, err] = intercomm.send_message(7, mess);
            assertEqual(ok, MESS_CODES.ok, ['Send  Error = ', err])
            
            [all_mess, task_ids] = intercomm.receive_all([3,7], 'any','-synch');
            assertEqual(numel(all_mess), 2);
            assertEqual(numel(task_ids), 2);
            assertEqual(task_ids, [3,7]);
            
            
            mess = DataMessage();
            mess.payload = 'a';
            [ok, err] = intercomm.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            mess.payload = 'b';
            [ok, err] = intercomm.send_message(7, mess);
            assertEqual(ok, MESS_CODES.ok, ['Send  Error = ', err])
            
            mess = LogMessage(0, 10, 1, '0');
            [ok, err] = intercomm.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            [ok, err] = intercomm.send_message(7, mess);
            assertEqual(ok, MESS_CODES.ok, ['Send  Error = ', err])
            
            [all_mess, task_ids] = intercomm.receive_all([3,7], 'log','-synch');
            assertEqual(numel(all_mess), 2);
            assertEqual(numel(task_ids), 2);
            assertEqual(task_ids, [3,7]);
            
            
            mess = DataMessage();
            mess.payload = 'a';
            [ok, err] = intercomm.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            mess.payload = 'b';
            [ok, err] = intercomm.send_message(7, mess);
            assertEqual(ok, MESS_CODES.ok, ['Send  Error = ', err])
            
            [all_mess, task_ids] = intercomm.receive_all([3,7], 'log');
            assertTrue(isempty(all_mess));
            assertTrue(isempty(task_ids));
            
        end
        %
        function test_receive_all_mess(obj)
            if obj.ignore_test
                return
            end
            intercomm = feval(obj.comm_name,obj.tests_control_strcut);
            clob_s = onCleanup(@()(finalize_all(intercomm)));
            
            
            mess = LogMessage(0, 10, 1, '0');
            % CPP_MPI messages in test mode are "reflected" from target node
            [ok, err] = intercomm.send_message(2, mess);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            [ok, err] = intercomm.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok, ['Send  Error = ', err])
            
            [all_mess, task_ids] = intercomm.receive_all('all', 'any');
            assertEqual(numel(all_mess), 2);
            assertEqual(numel(task_ids), 2);
            assertEqual(task_ids, [2,3]);
        end
        %
        function test_receive_data_mess(obj)
            if obj.ignore_test
                return
            end
            intercomm = feval(obj.comm_name,obj.tests_control_strcut);
            clob_s = onCleanup(@()(finalize_all(intercomm)));
            
            
            mess = DataMessage();
            mess.payload = 'a';
            
            [ok, err] = intercomm.send_message(2, mess);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            mess.payload = 'b';
            [ok, err] = intercomm.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            
            [all_mess, task_ids] = intercomm.receive_all('all', 'data');
            assertEqual(numel(all_mess), 2);
            assertEqual(numel(task_ids), 2);
            assertEqual(task_ids, [2, 3]);
        end
        %
        function test_receive_missing_data_blocking(obj)
            if obj.ignore_test
                return
            end
            intercomm = feval(obj.comm_name,obj.tests_control_strcut);
            clob_s = onCleanup(@()(finalize_all(intercomm)));
            
            
            mess = DataMessage();
            mess.payload = 'a';
            % CPP_MPI messages in test mode are "reflected" from target node
            [ok, err] = intercomm.send_message(2, mess);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            
            f = @()receive_all(intercomm,'all', 'data');
            assertExceptionThrown(f,'MESSAGES_FRAMEWORK:runtime_error',...
                'Receiving missing Blocking message should throw in test mode');
        end
        %
        function test_receive_data_receives_cancelled(obj)
            if obj.ignore_test
                return
            end
            intercomm = feval(obj.comm_name,obj.tests_control_strcut);
            clob_s = onCleanup(@()(finalize_all(intercomm)));
            
            
            mess = DataMessage();
            mess.payload = 'a';
            % CPP_MPI messages in test mode are "reflected" from target node
            [ok, err] = intercomm.send_message(2, mess);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            [ok, err] = intercomm.send_message(3, 'cancelled');
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            
            
            intercomm.throw_on_interrupts = false;
            [all_mess, task_ids] = intercomm.receive_all('all', 'data');
            assertEqual(numel(all_mess), 2);
            assertEqual(numel(task_ids), 2);
            assertEqual(task_ids, [2, 3]);
            assertEqual(all_mess{1}.mess_name,'data');
            assertEqual(all_mess{2}.mess_name,'cancelled');
            % cancel stucks
            f = @()receive_message(intercomm,2, 'data');
            assertExceptionThrown(f,'MESSAGES_FRAMEWORK:runtime_error',...
                'Receiving missing Blocking message should throw in test mode');
            [ok,err_mess,message]= intercomm.receive_message(3,'data');
            assertEqual(ok, MESS_CODES.ok, ['Received Error = ', err_mess])
            assertEqual(message.mess_name,'cancelled');
            [ok,err_mess,message]= intercomm.receive_message(3,'cancelled');
            assertEqual(ok, MESS_CODES.ok, ['Received Error = ', err_mess])
            assertEqual(message.mess_name,'cancelled');
        end
        %
        function test_receive_data_fail_comes(obj)
            if obj.ignore_test
                return
            end
            intercomm = feval(obj.comm_name,obj.tests_control_strcut);
            clob_s = onCleanup(@()(finalize_all(intercomm)));
            
            
            mess = DataMessage();
            mess.payload = 'a';
            % CPP_MPI messages in test mode are "reflected" from target node
            [ok, err] = intercomm.send_message(2, mess);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            mess.payload = 'b';
            [ok, err] = intercomm.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            
            [ok, err] = intercomm.send_message(3, FailedMessage());
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            
            intercomm.throw_on_interrupts = false;
            [messr,tid_from] = intercomm.receive_all('all', 'data');
            assertEqual(numel(messr),2)
            assertEqual(numel(tid_from),2)
            
            assertEqual(messr{1}.mess_name,'data')
            assertEqual(messr{2}.mess_name,'failed')
            
            intercomm.throw_on_interrupts = true;
            assertExceptionThrown(@()receive_all(intercomm,'all', 'data'),...
                'MESSAGE_FRAMEWORK:cancelled');
        end
        %
        function test_receive_data_log_remains(obj)
            if obj.ignore_test
                return
            end
            intercomm = feval(obj.comm_name,obj.tests_control_strcut);
            clob_s = onCleanup(@()(finalize_all(intercomm)));
            
            
            mess = DataMessage();
            mess.payload = 'a';
            % CPP_MPI messages in test mode are "reflected" from target node
            [ok, err] = intercomm.send_message(2, mess);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            mess.payload = 'b';
            [ok, err] = intercomm.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            
            [ok, err] = intercomm.send_message(3, LogMessage());
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            
            [messr,tid_from] = intercomm.receive_all('all', 'data');
            assertEqual(numel(messr),2)
            assertEqual(numel(tid_from),2)
            
            assertEqual(messr{1}.mess_name,'data')
            assertEqual(messr{2}.mess_name,'data')
            
            [messr,tid_from] = intercomm.receive_all('all', 'log');
            assertEqual(numel(messr),1)
            assertEqual(numel(tid_from),1)
            assertEqual(tid_from,3)
            
        end
        %
        function test_Send_and_Probe(obj)
            % Test communications in test mode
            if obj.ignore_test
                return
            end
            m_comm = feval(obj.comm_name);
            clob_s = onCleanup(@()(finalize_all(m_comm )));
            
            assertEqual(double(m_comm.labIndex), 1);
            assertEqual(double(m_comm.numLabs), 10);
            
            mess = LogMessage(1, 10, 1, []);
            [ok, err_mess] = m_comm.send_message(5, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            [mess_names, source_id_s] = m_comm.probe_all('all', 'any');
            assertEqual(numel(mess_names), 1);
            assertEqual(numel(source_id_s), 1);
            assertEqual(double(source_id_s(1)), (5));
            if isempty(obj.mess_name_fix)
                mess_name ='log';
            else
                mess_name =obj.mess_name_fix;
            end
            
            assertEqual(mess_names{1},mess_name );
            
            [ok, err_mess] = m_comm.send_message(7, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            [mess_names, source_id_s] = m_comm.probe_all('all', 'any');
            assertEqual(numel(mess_names), 2);
            assertEqual(numel(source_id_s), 2);
            assertEqual(double(source_id_s(1)), (5));
            assertEqual(double(source_id_s(2)), (7));
            assertEqual(mess_names{1}, mess_name);
            
            [mess_names, source_id_s] = m_comm.probe_all([], 'any');
            assertEqual(numel(mess_names), 2);
            assertEqual(numel(source_id_s), 2);
            assertEqual(double(source_id_s(1)), (5));
            assertEqual(double(source_id_s(2)), (7));
            assertEqual(mess_names{1}, mess_name);
            
        end
        %
        function test_Send_and_ProbeSpecific(obj)
            % Test different states of messaging system
            if obj.ignore_test
                return
            end
            m_comm = feval(obj.comm_name);
            clob_s = onCleanup(@()(finalize_all(m_comm )));
            
            assertEqual(double(m_comm.labIndex), 1);
            assertEqual(double(m_comm.numLabs), 10);
            
            mess = LogMessage(1, 10, 1, []);
            [ok, err_mess] = m_comm.send_message(5, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            [mess_names, source_id_s] = m_comm.probe_all('all', 'log');
            assertEqual(numel(mess_names), 1);
            assertEqual(numel(source_id_s), 1);
            assertEqual(double(source_id_s(1)), (5));
            assertEqual(mess_names{1}, mess.mess_name);
            [mess_names, source_id_s] = m_comm.probe_all('all', 'data');
            assertTrue(isempty(mess_names));
            assertTrue(isempty(source_id_s));
            
            mess1 = DataMessage();
            [ok, err_mess] = m_comm.send_message(7, mess1);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            [mess_names, source_id_s] = m_comm.probe_all('all', 'data');
            assertEqual(numel(mess_names), 1);
            assertEqual(numel(source_id_s), 1);
            assertEqual(double(source_id_s(1)), (7));
            assertEqual(mess_names{1},'data');
            
            [ok, err_mess] = m_comm.send_message(8, FailedMessage());
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            [mess_names, source_id_s] = m_comm.probe_all('all', 'log');
            assertEqual(numel(mess_names), 2);
            assertEqual(numel(source_id_s), 2);
            assertEqual(double(source_id_s(1)), 5);
            assertEqual(double(source_id_s(2)), 8);
            
            assertEqual(mess_names{1},'log');
            assertEqual(mess_names{2},'interrupt');
            
            [ok, err_mess] = m_comm.send_message(7, FailedMessage());
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            [mess_names, source_id_s] = m_comm.probe_all('all', 'log');
            assertEqual(numel(mess_names), 3);
            assertEqual(numel(source_id_s), 3);
            
            assertEqual(double(source_id_s(1)), 5);
            assertEqual(double(source_id_s(2)), 7);
            assertEqual(double(source_id_s(3)), 8);
            
            assertEqual(mess_names{1},'log');
            assertEqual(mess_names{2},'interrupt');
            assertEqual(mess_names{3},'interrupt');
            
            % failed message supresses data message
            [mess_names, source_id_s] = m_comm.probe_all('all', 'data');
            assertEqual(numel(mess_names), 2);
            assertEqual(numel(source_id_s), 2);
            
            assertEqual(double(source_id_s(1)), 7);
            assertEqual(double(source_id_s(2)), 8);
            
            assertEqual(mess_names{1},'interrupt');
            assertEqual(mess_names{2},'interrupt');
            
            [ok, err_mess] = m_comm.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            [mess_names, source_id_s] = m_comm.probe_all('all', 'log');
            assertEqual(numel(mess_names), 4);
            assertEqual(numel(source_id_s), 4);
            
            assertEqual(double(source_id_s(1)), 3);
            assertEqual(double(source_id_s(2)), 5);
            assertEqual(double(source_id_s(3)), 7);
            assertEqual(double(source_id_s(4)), 8);
            
            assertEqual(mess_names{1},'log');
            assertEqual(mess_names{2},'log');
            assertEqual(mess_names{3},'interrupt');
            assertEqual(mess_names{4},'interrupt');
            
            
            [mess_names, source_id_s] = m_comm.probe_all('all');
            assertEqual(numel(mess_names), 4);
            assertEqual(numel(source_id_s), 4);
            
            assertEqual(double(source_id_s(1)), 3);
            assertEqual(double(source_id_s(2)), 5);
            assertEqual(double(source_id_s(3)), 7);
            assertEqual(double(source_id_s(4)), 8);
            
            if isempty(obj.mess_name_fix)
                mess_name ='log';
            else
                mess_name =obj.mess_name_fix;
            end
            
            
            assertEqual(mess_names{1},mess_name );
            assertEqual(mess_names{2},mess_name );
            assertEqual(mess_names{3},'interrupt');
            assertEqual(mess_names{4},'interrupt');
            
        end
        %
        function test_Send4Receive4Synchroneous(obj)
            % Test communications in test mode
            if obj.ignore_test
                return
            end
            m_comm = feval(obj.comm_name);
            clob_s = onCleanup(@()(finalize_all(m_comm )));
            
            
            assertEqual(double(m_comm.labIndex), 1);
            assertEqual(double(m_comm.numLabs), 10);
            
            mess = DataMessage();
            mess.payload = 'a';
            [ok, err_mess] = m_comm.send_message(5, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            mess.payload = 'b';
            [ok, err_mess] = m_comm.send_message(5, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            mess.payload = 'c';
            [ok, err_mess] = m_comm.send_message(5, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            [ok, err_mess, messR] = m_comm.receive_message(5, mess.mess_name);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            mess.payload = 'a';
            assertEqual(mess, messR);
            
            [mess_names, source_id_s] = m_comm.probe_all(5, 'any');
            assertEqual(numel(mess_names),1);
            assertEqual(numel(source_id_s),1);
            if isempty(obj.mess_name_fix)
                mess_name ='data';
            else
                mess_name =obj.mess_name_fix;  % ugly Matlab MPI issue -- all other must follow
            end
            
            assertEqual(mess_names{1},mess_name);
            assertEqual(source_id_s,5);
            
            [ok, err_mess, messR] = m_comm.receive_message(5, mess.mess_name);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            mess.payload = 'b';
            assertEqual(mess, messR);
            
            [mess_names, source_id_s] = m_comm.probe_all(5, 'any');
            assertEqual(numel(mess_names),1);
            assertEqual(numel(source_id_s),1);
            
            if isempty(obj.mess_name_fix)
                mess_name ='data';
            else
                mess_name =obj.mess_name_fix;
            end
            
            assertEqual(mess_names{1},mess_name);
            assertEqual(source_id_s,5);
            
            mess.payload = 'd';
            [ok, err_mess] = m_comm.send_message(5, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            
            [ok, err_mess, messR] = m_comm.receive_message(5, mess.mess_name);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            mess.payload = 'c';
            assertEqual(mess, messR);
            
            [ok, err_mess, messR] = m_comm.receive_message(5, mess.mess_name);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            mess.payload = 'd';
            assertEqual(mess, messR);
            
            
            [mess_names, source_id_s] = m_comm.probe_all(5, 'any');
            assertTrue(isempty(mess_names));
            assertTrue(isempty(source_id_s));
        end
        %
        function test_Send3Receive1Asynch(obj)
            % Test communications in test mode
            if obj.ignore_test
                return
            end
            m_comm = feval(obj.comm_name);
            clob_s = onCleanup(@()(finalize_all(m_comm )));
            
            
            assertEqual(double(m_comm.labIndex), 1);
            assertEqual(double(m_comm.numLabs), 10);
            
            mess = LogMessage(1, 10, 1, []);
            [ok, err_mess] = m_comm.send_message(5, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            mess = LogMessage(2, 10, 3, []);
            [ok, err_mess] = m_comm.send_message(5, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            mess = LogMessage(3, 10, 5, []);
            [ok, err_mess] = m_comm.send_message(5, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            [ok, err_mess, messR] = m_comm.receive_message(5, mess.mess_name);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            assertEqual(mess, messR);
            
            [mess_names, source_id_s] = m_comm.probe_all(5, 'any');
            assertTrue(isempty(mess_names));
            assertTrue(isempty(source_id_s));
        end
        %
        function test_probe_and_receive_fail(obj)
            if obj.ignore_test
                return
            end
            m_comm = feval(obj.comm_name);
            clob_s = onCleanup(@()(finalize_all(m_comm )));
            
            
            assertEqual(double(m_comm.labIndex), 1);
            assertEqual(double(m_comm.numLabs), 10);
            
            mess1 = LogMessage(0,10);
            [ok, err_mess] = m_comm.send_message(5, mess1);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            mess2 = FailedMessage('an error');
            [ok, err_mess] = m_comm.send_message(6, mess2);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            [messNames,sources] = m_comm.probe_all(5, mess1.mess_name);
            assertFalse(isempty(messNames));
            assertEqual(sources(1),5);
            
            [messNames,sources] = m_comm.probe_all(6, mess2.mess_name);
            assertFalse(isempty(messNames));
            assertEqual(sources(1),6);
            % AND despite asking for different message name, probe gives
            % fail
            [messNames,sources] = m_comm.probe_all(6, mess1.mess_name);
            assertFalse(isempty(messNames));
            assertEqual(sources(1),6);
            
            [messNames,sources] = m_comm.probe_all('all', mess1.mess_name);
            assertEqual(numel(messNames),2);
            assertEqual(sources(1),5);
            assertEqual(sources(2),6);
            assertEqual(messNames{1},'log');
            assertEqual(messNames{2},'interrupt');
            
            [messNames,sources] = m_comm.probe_all('all', 'any');
            assertEqual(numel(messNames),2);
            assertEqual(sources(1),5);
            assertEqual(sources(2),6);
            if isempty(obj.mess_name_fix)
                mess_name ='log';
            else
                mess_name =obj.mess_name_fix;
            end
            assertEqual(messNames{1},mess_name);
            assertEqual(messNames{2},'interrupt');
            
            %-----------------------------------------------------------
            [ok, err_mess, messR] = m_comm.receive_message(6, mess1.mess_name);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            assertEqual(messR.mess_name,'failed');
            
            [ok, err_mess] = m_comm.send_message(3, mess2);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            
            [messNames,sources] = m_comm.probe_all('all', mess1.mess_name);
            assertEqual(numel(messNames),3);
            
            assertEqual(sources(1),3);
            assertEqual(sources(2),5);
            assertEqual(sources(3),6);
            assertEqual(messNames{1},'interrupt');
            assertEqual(messNames{2},'log');
            assertEqual(messNames{3},'failed');
            
            [messNames,sources] = m_comm.probe_all('all',[]);
            assertEqual(numel(messNames),3);
            
            if isempty(obj.mess_name_fix)
                mess_name ='log';
            else
                mess_name =obj.mess_name_fix;
            end
            
            assertEqual(sources(1),3);
            assertEqual(sources(2),5);
            assertEqual(sources(3),6);
            assertEqual(messNames{1},'interrupt');
            assertEqual(messNames{2},mess_name);
            assertEqual(messNames{3},'failed');
            
            
            % percistently receiving Fail message
            [ok, err_mess, messR] = m_comm.receive_message(6, mess1.mess_name);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            assertEqual(messR.mess_name,'failed');
            
            [ok, err_mess, messR] = m_comm.receive_message(3, mess1.mess_name);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            assertEqual(messR.mess_name,'failed');
            
            
            [messNames,sources] = m_comm.probe_all('all', mess1.mess_name);
            assertEqual(numel(messNames),3);
            
            assertEqual(sources(1),3);
            assertEqual(sources(2),5);
            assertEqual(sources(3),6);
            assertEqual(messNames{1},'failed');
            assertEqual(messNames{2},'log');
            assertEqual(messNames{3},'failed');
            
            % log message can be receved
            [ok, err_mess, messR] = m_comm.receive_message(5, mess1.mess_name);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            assertEqual(messR.mess_name,'log');
            
            % but fail remains
            [messNames,sources] = m_comm.probe_all('all', mess1.mess_name);
            assertEqual(numel(messNames),2);
            assertEqual(sources(1),3);
            assertEqual(sources(2),6);
            assertEqual(messNames{1},'failed');
            assertEqual(messNames{2},'failed');
        end
        %
        function test_receive_sync_async_override(obj)
            % testing that direct synchroneous/asynchroneous requests
            % overrides default test request for message
            
            if obj.ignore_test
                return
            end
            m_comm = feval(obj.comm_name);
            clob_s = onCleanup(@()(finalize_all(m_comm )));
            
            assertEqual(double(m_comm.labIndex), 1);
            assertEqual(double(m_comm.numLabs), 10);
            
            % blocking receive in test mode is not alowed
            f = @()receive_message(m_comm,5, 'log','-synch');
            assertExceptionThrown(f, 'MESSAGES_FRAMEWORK:runtime_error');
            
            mess = LogMessage(1, 10, 1, []);
            [ok, err_mess] = m_comm.send_message(5, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            [ok, err_mess, messR] = m_comm.receive_message(5, mess.mess_name);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            assertEqual(mess, messR);
        end
        %
        function test_check_whats_coming_data_kept_fail_overrides(obj)
            if obj.ignore_test
                return
            end
            m_comm = feval(obj.comm_name);
            clob_s = onCleanup(@()(finalize_all(m_comm )));
            
            
            
            dm = DataMessage();
            dm.payload = 'a';
            % CPP_MPI messages in test mode are "reflected" from target node
            [ok, err] = m_comm.send_message(2, dm);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            lm = LogMessage(0,10,1,[]);
            [ok, err] = m_comm.send_message(3,lm);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            
            task_ids = 1:m_comm.numLabs;
            mess_array = cell(1,numel(task_ids));
            [are_avail,mess_names]=m_comm.check_whats_coming_tester(task_ids,'log',mess_array,0);
            assertEqual(numel(are_avail),10)
            assertEqual(sum(are_avail),1)
            assertTrue(are_avail(3))
            mess_array{3} = lm;
            assertEqual(mess_names{3},lm.mess_name);
            
            [are_avail,mess_names]=m_comm.check_whats_coming_tester(task_ids,'data',mess_array,0);
            assertEqual(numel(are_avail),10)
            assertEqual(sum(are_avail),1)
            assertTrue(are_avail(2))
            mess_array{2} = dm;
            assertEqual(mess_names{2},dm.mess_name);
            
            
            
            [are_avail,mess_names]=m_comm.check_whats_coming_tester(task_ids,'log',mess_array,0);
            assertEqual(numel(are_avail),10)
            assertEqual(sum(are_avail),1)
            assertTrue(are_avail(3))
            assertFalse(are_avail(2))
            assertEqual(mess_names{2},'data')
            assertEqual(mess_names{3},'log')
            
            [are_avail,mess_names]=m_comm.check_whats_coming_tester(task_ids,'data',mess_array,0);
            assertEqual(numel(are_avail),10)
            assertEqual(sum(are_avail),0)
            assertFalse(are_avail(2))
            assertFalse(are_avail(3))
            assertEqual(mess_names{2},'data')
            assertEqual(mess_names{3},'log')
            
            
            [ok, err] = m_comm.send_message(3,'completed');
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            
            [are_avail,mess_names]=m_comm.check_whats_coming_tester(task_ids,'completed',mess_array,0);
            assertEqual(numel(are_avail),10)
            assertEqual(sum(are_avail),1)
            assertTrue(are_avail(3))
            assertFalse(are_avail(2))
            assertEqual(mess_names{2},'data')
            assertEqual(mess_names{3},'completed')
            
            [ok, err] = m_comm.send_message(2,'completed');
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            
            [are_avail,mess_names]=m_comm.check_whats_coming_tester(task_ids,'completed',mess_array,0);
            assertEqual(numel(are_avail),10)
            assertEqual(sum(are_avail),1)
            assertFalse(are_avail(2))
            assertTrue(are_avail(3))
            assertEqual(mess_names{2},'data')
            assertEqual(mess_names{3},'completed')
            
            [ok, err] = m_comm.send_message(2,FailedMessage);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            [are_avail,mess_names] =m_comm.check_whats_coming_tester(task_ids,'data',mess_array,0);
            assertEqual(numel(are_avail),10)
            assertEqual(sum(are_avail),1)
            assertTrue(are_avail(2))
            assertEqual(mess_names{2},'interrupt')
            assertEqual(mess_names{3},'log') % ! beware. Though not worth changing
            
        end
        %
        function test_check_whats_coming_fail_overrides(obj)
            if obj.ignore_test
                return
            end
            m_comm = feval(obj.comm_name);
            clob_s = onCleanup(@()(finalize_all(m_comm )));
            
            
            dm = DataMessage();
            dm.payload = 'a';
            % CPP_MPI messages in test mode are "reflected" from target node
            [ok, err] = m_comm.send_message(2, dm);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            [ok, err] = m_comm.send_message(4, dm);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            
            lm = LogMessage(0,10,1,[]);
            [ok, err] = m_comm.send_message(3,lm);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            [ok, err] = m_comm.send_message(6,lm);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            
            
            task_ids = 1:m_comm.numLabs;
            mess_array = cell(1,numel(task_ids));
            [are_avail,mess_names]=m_comm.check_whats_coming_tester(task_ids,'log',mess_array,0);
            assertEqual(numel(are_avail),10)
            assertEqual(sum(are_avail),2)
            assertTrue(are_avail(3))
            assertTrue(are_avail(6))
            mess_array{3} = lm;
            assertEqual(mess_names{3},'log')
            assertEqual(mess_names{6},'log')
            
            
            [are_avail,mess_names]=m_comm.check_whats_coming_tester('all','data',mess_array,0);
            assertEqual(numel(are_avail),10)
            assertEqual(sum(are_avail),2)
            assertTrue(are_avail(2))
            assertTrue(are_avail(4))
            mess_array{2} = dm;
            assertEqual(mess_names{2},'data')
            assertEqual(mess_names{4},'data')
            
            
            
            [are_avail,mess_names]=m_comm.check_whats_coming_tester(task_ids,'log',mess_array,0);
            assertEqual(numel(are_avail),10)
            assertEqual(sum(are_avail),2)
            assertFalse(are_avail(2))
            assertTrue(are_avail(3))
            assertTrue(are_avail(6))
            assertEqual(mess_names{2},'data')
            assertEqual(mess_names{3},'log')
            assertEqual(mess_names{6},'log')
            
            
            [are_avail,mess_names]=m_comm.check_whats_coming_tester(task_ids,'data',mess_array,0);
            assertEqual(numel(are_avail),10)
            assertEqual(sum(are_avail),1)
            assertTrue(are_avail(4))
            assertFalse(are_avail(2))
            assertEqual(mess_names{2},'data')
            assertEqual(mess_names{3},'log')
            assertEqual(mess_names{4},'data')
            
            
            [ok, err] = m_comm.send_message(3,'completed');
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            
            [are_avail,mess_names]=m_comm.check_whats_coming_tester(task_ids,'completed',mess_array,0);
            assertEqual(numel(are_avail),10)
            assertEqual(sum(are_avail),1)
            assertTrue(are_avail(3))
            assertEqual(mess_names{3},'completed')
            assertEqual(mess_names{2},'data')
            
            
            [ok, err] = m_comm.send_message(2,'completed');
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            
            [are_avail,mess_names]=m_comm.check_whats_coming_tester(task_ids,'completed',mess_array,0);
            assertEqual(numel(are_avail),10)
            assertEqual(sum(are_avail),1)
            assertFalse(are_avail(2))
            assertTrue(are_avail(3))
            assertEqual(mess_names{2},'data')
            assertEqual(mess_names{3},'completed')
            
            [ok, err] = m_comm.send_message(2,FailedMessage);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            [are_avail,mess_names]=m_comm.check_whats_coming_tester(task_ids,'data',mess_array,0);
            assertEqual(numel(are_avail),10)
            assertEqual(sum(are_avail),2)
            assertTrue(are_avail(2))
            assertTrue(are_avail(4))
            assertEqual(mess_names{2},'interrupt')
            assertEqual(mess_names{3},'log')
            assertEqual(mess_names{4},'data')
            
        end
        %
        function test_probe_wrong_char_name_throws(obj)
            if obj.ignore_test
                return
            end
            m_comm = feval(obj.comm_name);
            clob_s = onCleanup(@()(finalize_all(m_comm )));
            
            
            
            dm = DataMessage();
            dm.payload = 'a';
            % CPP_MPI messages in test mode are "reflected" from target node
            [ok, err] = m_comm.send_message(2, dm);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            lm = LogMessage(0,10,1,[]);
            [ok, err] = m_comm.send_message(3,lm);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])

            mess_array = cell(1,5);            
            f = @()check_whats_coming_tester(m_comm,'wrong','log',mess_array,0);
            assertExceptionThrown(f,'MESSAGES_FRAMEWORK:invalid_argument');
            
            f = @()probe_all(m_comm,'wrong','any');
            assertExceptionThrown(f,'MESSAGES_FRAMEWORK:invalid_argument');            
            
            
            f = @()receive_all(m_comm,'wrong','log');
            assertExceptionThrown(f,'MESSAGES_FRAMEWORK:invalid_argument');                        
        end
        %
        function test_SendReceive(obj)
            % Test communications in test mode
            if obj.ignore_test
                return
            end
            m_comm = feval(obj.comm_name);
            clob_s = onCleanup(@()(finalize_all(m_comm )));
            
            
            assertEqual(double(m_comm.labIndex), 1);
            assertEqual(double(m_comm.numLabs), 10);
            
            mess = LogMessage(1, 10, 1, []);
            [ok, err_mess] = m_comm.send_message(5, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            [ok, err_mess, messR] = m_comm.receive_message(5, mess.mess_name);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            assertEqual(mess, messR);
            %-----------------------------------------------------------
            [ok, err_mess, messR] = m_comm.receive_message(5, mess.mess_name);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            assertTrue(isempty(messR));
            %--------------------------------------------------------------
            %
            % blocking receive in test mode is not alowed
            f = @()receive_message(m_comm,5, 'init');
            assertExceptionThrown(f, 'MESSAGES_FRAMEWORK:runtime_error');
            
            
            [ok, err_mess] = m_comm.send_message(4, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            [ok, err_mess, messR] = m_comm.receive_message(5, 'any');
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            assertTrue(isempty(messR));
            
            [ok, err_mess, messR] = m_comm.receive_message(4, 'any');
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            assertEqual(mess, messR);
            
            
            % out-of range
            f = @()send_message(m_comm, 11, mess);
            assertExceptionThrown(f, 'MESSAGES_FRAMEWORK:invalid_argument',...
                'Should throw invalid argument on out-of range message but got something else');
            
            clear clob_r;
        end
        %
        function test_Receive_fromAny_is_error(obj)
            m_comm = feval(obj.comm_name);
            clob_r = onCleanup(@()(finalize_all(m_comm )));
            
            f = @()receive_message(m_comm,'any', 'any');
            assertExceptionThrown(f, 'MESSAGES_FRAMEWORK:invalid_argument');
            
            f = @()receive_message(m_comm,-1, 'any');
            assertExceptionThrown(f, 'MESSAGES_FRAMEWORK:invalid_argument');
            
            f = @()receive_message(m_comm,[], 'any');
            assertExceptionThrown(f, 'MESSAGES_FRAMEWORK:invalid_argument');
            
            
            f = @()receive_message(m_comm,'any', 'data');
            assertExceptionThrown(f, 'MESSAGES_FRAMEWORK:invalid_argument');
            
            
            f = @()receive_message(m_comm,-1, 'data');
            assertExceptionThrown(f, 'MESSAGES_FRAMEWORK:invalid_argument');
            
            
            f = @()receive_message(m_comm,[], 'data');
            assertExceptionThrown(f, 'MESSAGES_FRAMEWORK:invalid_argument');
            
            f = @()receive_message(m_comm,'any', 'log');
            assertExceptionThrown(f, 'MESSAGES_FRAMEWORK:invalid_argument');
            
            
            f = @()receive_message(m_comm,-1, 'log');
            assertExceptionThrown(f, 'MESSAGES_FRAMEWORK:invalid_argument');
            
            f = @()receive_message(m_comm,[], 'log');
            assertExceptionThrown(f, 'MESSAGES_FRAMEWORK:invalid_argument');
            
            clear clob_r;
        end
        %
        function test_pool_initalized(obj)
            m_comm = feval(obj.comm_name);
            clob_r = onCleanup(@()(finalize_all(m_comm )));
            n_labs = m_comm.numLabs;
            node_names = m_comm.get_node_names();
            for i=1:n_labs
                assertEqual(node_names{i},['Node',num2str(i)]);
            end
            
        end
        
    end
end

