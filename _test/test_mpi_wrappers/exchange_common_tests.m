classdef exchange_common_tests < MPI_Test_Common
    % Class to test common interface for all MPI frameworks used by Herbert
    %
    
    properties
        % the name of the class, responsible for sending/receiving framework
        % messages in test mode
        comm_name
        % the field, containing structure, used as input for different tests
        tests_control_strcut
    end
    
    methods
        function obj = exchange_common_tests(test_name,comm_name,fw_name,tcs)
            obj = obj@MPI_Test_Common(test_name,fw_name);
            obj.comm_name   = comm_name;
            obj.tests_control_strcut = tcs;
        end
        
        function test_JobExecutor_canceled(obj)
            serverfbMPI = MessagesFilebased(['test_JE_',obj.framework_name,'_canceled']);
            serverfbMPI.mess_exchange_folder = tmp_dir;
            
            [data_exchange_folder, JOB_id] = fileparts(serverfbMPI.mess_exchange_folder);
            cs = iMessagesFramework.build_worker_init(fileparts(data_exchange_folder), ...
                JOB_id, obj.comm_name, 1, 3, true);
            
            % intercom constructor invoked here.
            [fbMPI, intercomm] = JobExecutor.init_frameworks(cs);
            clob1 = onCleanup(@()(finalize_all(intercomm)));
            clob2 = onCleanup(@()(finalize_all(fbMPI)));
            assertTrue(isa(intercomm, obj.comm_name));
            assertEqual(double(intercomm.labIndex), 1);
            assertEqual(double(intercomm.numLabs), 3);
            
            
            % send fake messages, presumably generated by workers 2 and 3
            % JE will not run if not received these messages.
            m1 = aMessage('started');
            m1.payload = 'a';
            [ok, err_mess] = intercomm.send_message(2, m1);
            assertEqual(ok, MESS_CODES.ok, ['Error: ', err_mess]);
            m1.payload = 'b';
            [ok, err_mess] = intercomm.send_message(3, m1);
            assertEqual(ok, MESS_CODES.ok, ['Error: ', err_mess]);
            
            
            je = JETester();
            common_job_param = struct('filepath', data_exchange_folder, ...
                'filename_template', 'test_jobDispatcherL%d_nf%d.txt', ...
                'fail_for_labsN', 2:3);
            im = InitMessage(common_job_param, 1, 1, 1);
            
            je = je.init(fbMPI, intercomm, im, true);
            
            % send fake 'canceled' messages, presumably generated by worker 2
            intercomm.send_message(2,'canceled');
            
            is = je.is_job_canceled();
            assertTrue(is);
            
        end
        
        function test_JobExecutor(obj)
            % Substantial part of parallel worker logic, related to jobExecutor
            % initialization and completeon operations is tested here.
            %
            if obj.ignore_test
                return
            end
            
            
            serverfbMPI = MessagesFilebased(['test_JE_',obj.framework_name]);
            serverfbMPI.mess_exchange_folder = tmp_dir;
            
            [data_exchange_folder, JOB_id] = fileparts(serverfbMPI.mess_exchange_folder);
            cs = iMessagesFramework.build_worker_init(fileparts(data_exchange_folder), ...
                JOB_id, obj.comm_name, 1, 3, true);
            
            % intercom constructor invoked here.
            [fbMPI, intercomm] = JobExecutor.init_frameworks(cs);
            clob1 = onCleanup(@()(finalize_all(intercomm)));
            clob2 = onCleanup(@()(finalize_all(fbMPI)));
            assertTrue(isa(intercomm,obj.comm_name));
            assertEqual(double(intercomm.labIndex), 1);
            assertEqual(double(intercomm.numLabs), 3);
            
            
            % send fake messages, presumably generated by workers 2 and 3
            % JE will not run if not received these messages.
            m1 = aMessage('started');
            m1.payload = 'a';
            [ok, err_mess] = intercomm.send_message(2, m1);
            assertEqual(ok, MESS_CODES.ok, ['Error: ', err_mess]);
            m1.payload = 'b';
            [ok, err_mess] = intercomm.send_message(3, m1);
            assertEqual(ok, MESS_CODES.ok, ['Error: ', err_mess]);
            
            
            je = JETester();
            common_job_param = struct('filepath', data_exchange_folder, ...
                'filename_template', 'test_jobDispatcherL%d_nf%d.txt', ...
                'fail_for_labsN', 2:3);
            im = InitMessage(common_job_param, 1, 1, 1);
            % receive 'started' messages from all nodes reduce then and return
            % 'started' message to control node.
            je = je.init(fbMPI, intercomm, im, true);
            is = je.is_job_canceled();
            assertFalse(is);
            je.log_progress(0, 9, 0, []);
            
            [ok, err_mess, message] = serverfbMPI.receive_message(1, 'started');
            assertEqual(ok, MESS_CODES.ok, ['Error: ', err_mess]);
            assertEqual(message.mess_name, 'started')
            assertEqual(numel(message.payload), 3);
            assertTrue(isempty(message.payload{1}));
            assertEqual(message.payload{2}, 'a');
            assertEqual(message.payload{3}, 'b');
            %--------------------------------------------------------------
            mess = LogMessage(0, 10, 1, '2');
            [ok, err] = intercomm.send_message(2, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            mess = LogMessage(1, 10, 1, '3');
            [ok, err] = intercomm.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            
            je.log_progress(1, 9, 2, '1');
            
            [ok, err_mess, message] = serverfbMPI.receive_message(1, 'log');
            assertEqual(ok, MESS_CODES.ok, ['Error: ', err_mess]);
            assertEqual(message.mess_name, 'log');
            assertEqual(numel(message.worker_logs), 3);
            assertTrue(iscell(message.worker_logs));
            
            mess = CompletedMessage();
            mess.payload = 'Job 2 has been completed';
            [ok, err] = intercomm.send_message(2, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            mess = FailedMessage('Test Failure from Node 3');
            [ok, err] = intercomm.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok, ['Error = ', err])
            
            
            [ok, err_mess] = je.finish_task();
            assertEqual(ok, true, ['Error: ', err_mess]);
            [ok, err_mess, message] = serverfbMPI.receive_message(1, 'log');
            assertEqual(ok, MESS_CODES.ok, ['Error: ', err_mess]);
            assertEqual(message.mess_name, 'failed');
            assertEqual(numel(message.payload), 3);
        end
        
        function test_receive_all_mess(obj)
            if obj.ignore_test
                return
            end
            intercomm = feval(obj.comm_name,obj.tests_control_strcut);
            clob_s = onCleanup(@()(finalize_all(intercomm)));
            
            
            mess = LogMessage(0, 10, 1, '0');
            % CPP_MPI messages in test mode are "reflected" from target node
            [ok, err] = intercomm.send_message(2, mess);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            [ok, err] = intercomm.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok, ['Send  Error = ', err])
            
            [all_mess, task_ids] = intercomm.receive_all('all', 'any');
            assertEqual(numel(all_mess), 2);
            assertEqual(numel(task_ids), 2);
            assertEqual(task_ids, [2; 3]);
        end
        %
        function test_receive_data_mess(obj)
            if obj.ignore_test
                return
            end
            intercomm = feval(obj.comm_name,obj.tests_control_strcut);
            clob_s = onCleanup(@()(finalize_all(intercomm)));
            
            
            mess = DataMessage();
            mess.payload = 'a';
            
            [ok, err] = intercomm.send_message(2, mess);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            mess.payload = 'b';
            [ok, err] = intercomm.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            
            [all_mess, task_ids] = intercomm.receive_all('all', 'data');
            assertEqual(numel(all_mess), 2);
            assertEqual(numel(task_ids), 2);
            assertEqual(task_ids, [2; 3]);
        end
        %
        function test_receive_missing_data_blocking(obj)
            if obj.ignore_test
                return
            end
            intercomm = feval(obj.comm_name,obj.tests_control_strcut);
            clob_s = onCleanup(@()(finalize_all(intercomm)));
            
            
            mess = DataMessage();
            mess.payload = 'a';
            % CPP_MPI messages in test mode are "reflected" from target node
            [ok, err] = intercomm.send_message(2, mess);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            
            f = @()receive_all(intercomm,'all', 'data');
            assertExceptionThrown(f,'MESSAGES_FRAMEWORK:runtime_error',...
                'Receiving missing Blocking message should throw in test mode')
        end
        
        function test_receive_data_and_canceled_throws(obj)
            if obj.ignore_test
                return
            end
            intercomm = feval(obj.comm_name,obj.tests_control_strcut);
            clob_s = onCleanup(@()(finalize_all(intercomm)));
            
            
            mess = DataMessage();
            mess.payload = 'a';
            % CPP_MPI messages in test mode are "reflected" from target node
            [ok, err] = intercomm.send_message(2, mess);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            [ok, err] = intercomm.send_message(3, 'canceled');
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            
            
            f = @()receive_all(intercomm,'all', 'data');
            assertExceptionThrown(f,'MESSAGE_FRAMEWORK:canceled',...
                'Receiving missing Blocking message should throw in test mode')
        end
        %
        function test_receive_data_fail_comes(obj)
            if obj.ignore_test
                return
            end
            intercomm = feval(obj.comm_name,obj.tests_control_strcut);
            clob_s = onCleanup(@()(finalize_all(intercomm)));
            
            
            mess = DataMessage();
            mess.payload = 'a';
            % CPP_MPI messages in test mode are "reflected" from target node
            [ok, err] = intercomm.send_message(2, mess);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            mess.payload = 'b';
            [ok, err] = intercomm.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            
            [ok, err] = intercomm.send_message(3, FailedMessage());
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            
            [messr,tid_from] = intercomm.receive_all('all', 'data');
            assertEqual(numel(messr),2)
            assertEqual(numel(tid_from),2)
            
            assertEqual(messr{1}.mess_name,'data')
            assertEqual(messr{2}.mess_name,'failed')
        end
        function test_receive_data_log_remains(obj)
            if obj.ignore_test
                return
            end
            intercomm = feval(obj.comm_name,obj.tests_control_strcut);
            clob_s = onCleanup(@()(finalize_all(intercomm)));
            
            
            mess = DataMessage();
            mess.payload = 'a';
            % CPP_MPI messages in test mode are "reflected" from target node
            [ok, err] = intercomm.send_message(2, mess);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            mess.payload = 'b';
            [ok, err] = intercomm.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            
            [ok, err] = intercomm.send_message(3, LogMessage());
            assertEqual(ok, MESS_CODES.ok, ['Send Error = ', err])
            
            [messr,tid_from] = intercomm.receive_all('all', 'data');
            assertEqual(numel(messr),2)
            assertEqual(numel(tid_from),2)
            
            assertEqual(messr{1}.mess_name,'data')
            assertEqual(messr{2}.mess_name,'data')
            
            [messr,tid_from] = intercomm.receive_all('all', 'log');
            assertEqual(numel(messr),1)
            assertEqual(numel(tid_from),1)
            assertEqual(tid_from,3)
            
        end
        
        
        
        function test_Send_and_Probe(obj)
            % Test communications in test mode
            if obj.ignore_test
                return
            end
            m_comm = feval(obj.comm_name);
            clob_s = onCleanup(@()(finalize_all(m_comm )));
            
            assertEqual(double(m_comm.labIndex), 1);
            assertEqual(double(m_comm.numLabs), 10);
            
            mess = LogMessage(1, 10, 1, []);
            [ok, err_mess] = m_comm.send_message(5, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            [mess_names, source_id_s] = m_comm.probe_all('all', 'any');
            assertEqual(numel(mess_names), 1);
            assertEqual(numel(source_id_s), 1);
            assertEqual(double(source_id_s(1)), (5));
            assertEqual(mess_names{1}, mess.mess_name);
            
            [ok, err_mess] = m_comm.send_message(7, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            [mess_names, source_id_s] = m_comm.probe_all('all', 'any');
            assertEqual(numel(mess_names), 2);
            assertEqual(numel(source_id_s), 2);
            assertEqual(double(source_id_s(1)), (5));
            assertEqual(double(source_id_s(2)), (7));
            assertEqual(mess_names{1}, mess.mess_name);
            
        end
        %
        function test_Send_and_ProbeSpecific(obj)
            % Test different states of messaging system
            if obj.ignore_test
                return
            end
            m_comm = feval(obj.comm_name);
            clob_s = onCleanup(@()(finalize_all(m_comm )));
            
            assertEqual(double(m_comm.labIndex), 1);
            assertEqual(double(m_comm.numLabs), 10);
            
            mess = LogMessage(1, 10, 1, []);
            [ok, err_mess] = m_comm.send_message(5, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            [mess_names, source_id_s] = m_comm.probe_all('all', 'log');
            assertEqual(numel(mess_names), 1);
            assertEqual(numel(source_id_s), 1);
            assertEqual(double(source_id_s(1)), (5));
            assertEqual(mess_names{1}, mess.mess_name);
            [mess_names, source_id_s] = m_comm.probe_all('all', 'data');
            assertTrue(isempty(mess_names));
            assertTrue(isempty(source_id_s));
            
            mess1 = DataMessage();
            [ok, err_mess] = m_comm.send_message(7, mess1);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            [mess_names, source_id_s] = m_comm.probe_all('all', 'data');
            assertEqual(numel(mess_names), 1);
            assertEqual(numel(source_id_s), 1);
            assertEqual(double(source_id_s(1)), (7));
            assertEqual(mess_names{1},'data');
            
            [ok, err_mess] = m_comm.send_message(8, FailedMessage());
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            [mess_names, source_id_s] = m_comm.probe_all('all', 'log');
            assertEqual(numel(mess_names), 2);
            assertEqual(numel(source_id_s), 2);
            assertEqual(double(source_id_s(1)), 5);
            assertEqual(double(source_id_s(2)), 8);
            
            assertEqual(mess_names{1},'log');
            assertEqual(mess_names{2},'failed');
            
            [ok, err_mess] = m_comm.send_message(7, FailedMessage());
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            [mess_names, source_id_s] = m_comm.probe_all('all', 'log');
            assertEqual(numel(mess_names), 3);
            assertEqual(numel(source_id_s), 3);
            
            assertEqual(double(source_id_s(1)), 5);
            assertEqual(double(source_id_s(2)), 7);
            assertEqual(double(source_id_s(3)), 8);
            
            assertEqual(mess_names{1},'log');
            assertEqual(mess_names{2},'failed');
            assertEqual(mess_names{3},'failed');
            
            % failed message supresses data message
            [mess_names, source_id_s] = m_comm.probe_all('all', 'data');
            assertEqual(numel(mess_names), 2);
            assertEqual(numel(source_id_s), 2);
            
            assertEqual(double(source_id_s(1)), 7);
            assertEqual(double(source_id_s(2)), 8);
            
            assertEqual(mess_names{1},'failed');
            assertEqual(mess_names{2},'failed');
            
            [ok, err_mess] = m_comm.send_message(3, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            [mess_names, source_id_s] = m_comm.probe_all('all', 'log');
            assertEqual(numel(mess_names), 4);
            assertEqual(numel(source_id_s), 4);
            
            assertEqual(double(source_id_s(1)), 3);
            assertEqual(double(source_id_s(2)), 5);
            assertEqual(double(source_id_s(3)), 7);
            assertEqual(double(source_id_s(4)), 8);
            
            assertEqual(mess_names{1},'log');
            assertEqual(mess_names{2},'log');
            assertEqual(mess_names{3},'failed');
            assertEqual(mess_names{4},'failed');
            
            
            [mess_names, source_id_s] = m_comm.probe_all('all');
            assertEqual(numel(mess_names), 4);
            assertEqual(numel(source_id_s), 4);
            
            assertEqual(double(source_id_s(1)), 3);
            assertEqual(double(source_id_s(2)), 5);
            assertEqual(double(source_id_s(3)), 7);
            assertEqual(double(source_id_s(4)), 8);
            
            assertEqual(mess_names{1},'log');
            assertEqual(mess_names{2},'log');
            assertEqual(mess_names{3},'failed');
            assertEqual(mess_names{4},'failed');
            
        end
        %
        function test_Send4Receive4Synchroneous(obj)
            % Test communications in test mode
            if obj.ignore_test
                return
            end
            m_comm = feval(obj.comm_name);
            clob_s = onCleanup(@()(finalize_all(m_comm )));
            
            
            assertEqual(double(m_comm.labIndex), 1);
            assertEqual(double(m_comm.numLabs), 10);
            
            mess = DataMessage();
            mess.payload = 'a';
            [ok, err_mess] = m_comm.send_message(5, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            mess.payload = 'b';
            [ok, err_mess] = m_comm.send_message(5, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            mess.payload = 'c';
            [ok, err_mess] = m_comm.send_message(5, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            [ok, err_mess, messR] = m_comm.receive_message(5, mess.mess_name);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            mess.payload = 'a';
            assertEqual(mess, messR);
            
            [mess_names, source_id_s] = m_comm.probe_all(5, 'any');
            assertEqual(numel(mess_names),1);
            assertEqual(numel(source_id_s),1);
            assertEqual(mess_names{1},'data');
            assertEqual(source_id_s,5);
            
            [ok, err_mess, messR] = m_comm.receive_message(5, mess.mess_name);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            mess.payload = 'b';
            assertEqual(mess, messR);
            
            [mess_names, source_id_s] = m_comm.probe_all(5, 'any');
            assertEqual(numel(mess_names),1);
            assertEqual(numel(source_id_s),1);
            assertEqual(mess_names{1},'data');
            assertEqual(source_id_s,5);
            
            mess.payload = 'd';
            [ok, err_mess] = m_comm.send_message(5, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            
            [ok, err_mess, messR] = m_comm.receive_message(5, mess.mess_name);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            mess.payload = 'c';
            assertEqual(mess, messR);
            
            [ok, err_mess, messR] = m_comm.receive_message(5, mess.mess_name);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            mess.payload = 'd';
            assertEqual(mess, messR);
            
            
            [mess_names, source_id_s] = m_comm.probe_all(5, 'any');
            assertTrue(isempty(mess_names));
            assertTrue(isempty(source_id_s));
        end
        %
        function test_Send3Receive1Asynch(obj)
            % Test communications in test mode
            if obj.ignore_test
                return
            end
            m_comm = feval(obj.comm_name);
            clob_s = onCleanup(@()(finalize_all(m_comm )));
            
            
            assertEqual(double(m_comm.labIndex), 1);
            assertEqual(double(m_comm.numLabs), 10);
            
            mess = LogMessage(1, 10, 1, []);
            [ok, err_mess] = m_comm.send_message(5, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            mess = LogMessage(2, 10, 3, []);
            [ok, err_mess] = m_comm.send_message(5, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            mess = LogMessage(3, 10, 5, []);
            [ok, err_mess] = m_comm.send_message(5, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            [ok, err_mess, messR] = m_comm.receive_message(5, mess.mess_name);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            assertEqual(mess, messR);
            
            [mess_names, source_id_s] = m_comm.probe_all(5, 'any');
            assertTrue(isempty(mess_names));
            assertTrue(isempty(source_id_s));
        end
        
        function test_SendReceive(obj)
            % Test communications in test mode
            if obj.ignore_test
                return
            end
            m_comm = feval(obj.comm_name);
            clob_s = onCleanup(@()(finalize_all(m_comm )));
            
            
            assertEqual(double(m_comm.labIndex), 1);
            assertEqual(double(m_comm.numLabs), 10);
            
            mess = LogMessage(1, 10, 1, []);
            [ok, err_mess] = m_comm.send_message(5, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            [ok, err_mess, messR] = m_comm.receive_message(5, mess.mess_name);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            assertEqual(mess, messR);
            %-----------------------------------------------------------
            [ok, err_mess, messR] = m_comm.receive_message(5, mess.mess_name);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            assertTrue(isempty(messR));
            %--------------------------------------------------------------
            %
            % blocking receive in test mode is not alowed
            f = @()receive_message(m_comm,5, 'init');
            assertExceptionThrown(f, 'MESSAGES_FRAMEWORK:runtime_error')
            
            
            [ok, err_mess] = m_comm.send_message(4, mess);
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            
            [ok, err_mess, messR] = m_comm.receive_message(5, 'any');
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            assertTrue(isempty(messR));
            
            [ok, err_mess, messR] = m_comm.receive_message(4, 'any');
            assertEqual(ok, MESS_CODES.ok);
            assertTrue(isempty(err_mess));
            assertEqual(mess, messR);
            
            
            % out-of range
            f = @()send_message(m_comm, 11, mess);
            assertExceptionThrown(f, 'MESSAGES_FRAMEWORK:invalid_argument',...
                'Should throw invalid argument on out-of range message but got something else')
            
            clear clob_r;
        end
        %
        function test_Receive_fromAny_is_error(obj)
            m_comm = feval(obj.comm_name);
            clob_r = onCleanup(@()(finalize_all(m_comm )));
            
            f = @()receive_message(m_comm,'any', 'any');
            assertExceptionThrown(f, 'MESSAGES_FRAMEWORK:invalid_argument')
            
            f = @()receive_message(m_comm,-1, 'any');
            assertExceptionThrown(f, 'MESSAGES_FRAMEWORK:invalid_argument')
            
            f = @()receive_message(m_comm,[], 'any');
            assertExceptionThrown(f, 'MESSAGES_FRAMEWORK:invalid_argument')
            
            
            f = @()receive_message(m_comm,'any', 'data');
            assertExceptionThrown(f, 'MESSAGES_FRAMEWORK:invalid_argument')
            
            
            f = @()receive_message(m_comm,-1, 'data');
            assertExceptionThrown(f, 'MESSAGES_FRAMEWORK:invalid_argument')
            
            
            f = @()receive_message(m_comm,[], 'data');
            assertExceptionThrown(f, 'MESSAGES_FRAMEWORK:invalid_argument')
            
            f = @()receive_message(m_comm,'any', 'log');
            assertExceptionThrown(f, 'MESSAGES_FRAMEWORK:invalid_argument')
            
            
            f = @()receive_message(m_comm,-1, 'log');
            assertExceptionThrown(f, 'MESSAGES_FRAMEWORK:invalid_argument')
            
            f = @()receive_message(m_comm,[], 'log');
            assertExceptionThrown(f, 'MESSAGES_FRAMEWORK:invalid_argument')
            
            clear clob_r;
        end
    end
end

