classdef JETester < JobExecutor
    % Class used to test job dispatcher functionality
    
    properties
    end
    
    methods
        function je = JETester(varargin)
            je = je@JobExecutor(varargin{:});
        end
        function this=do_job(this,control_struct)
            % Test do_job method implementated for testing purposes
            %
            % the particular JobDispatcher should write its own method
            % keeping the same meaning for the interface
            %
            % Input parameters:
            % control_struct -- a structure, containing job
            %                   parameters. 
            % this structure is generated by JobDispatcher.send_jobs method
            % by dividing array or cellarray of input parameters between
            % workers. 
            %
            % this particular implementation writes files according to template,
            % provided in test_job_dispatcher.m file
            %aa= input('enter_something')  
            n_jobs = control_struct.n_steps;
            job_num = this.job_id();
            disp('****************************************************');
            disp([' n_files: ',num2str(n_jobs)]);
            for ji = 1:n_jobs
                job_par = control_struct.loop_param(ji);
                
                filename = sprintf(job_par.filename_template,job_num,ji);
                file = fullfile(job_par.filepath,filename);
                f=fopen(file,'w');
                fwrite(f,['file: ',file],'char');
                fclose(f);
                disp('****************************************************');
                disp(['finished test job generating test file: ',filename]);
                disp('****************************************************');
            end
            if control_struct.return_results
                out_str = sprintf('Job %d generated %d files',job_num,n_jobs);
            else
                out_str = [];
            end
            this = this.return_results(out_str);
        end        
    end
    
end

