function [ok,err_mess]=finish_task_(obj,OtherMessage,mess_reduction_function)
% set up tag, indicating that the job have finished and
% send message with output job results
%
% clear all existing messages intended or generated by this job

% wait for all messages of this kind to arrive
syncronize = true;
if exist('OtherMessage','var') && ~isempty(OtherMessage)
    mess = OtherMessage;
    if obj.return_results_  && ~isempty(obj.task_results_holder_)
        if isempty(mess.payload)
            mess.payload = obj.task_results_holder_;
        else
            mess.payload = {mess.payload,obj.task_results_holder_};
        end
    end
    if isa(mess,'FailMessage')
        syncronize  = false;
    end
else
    mess = aMessage('completed');
    if obj.return_results_
        mess.payload = obj.task_results_holder_;
    end
end
if ~exist('mess_reduction_function','var')
    % function used to reduce messages reived from all labs contributing
    % labs and process final message to send to host
    mess_reduction_function = [];
end
%disp(' before reducing message "completed');
[ok,err_mess,fin_mess] = reduce_messages_(obj,mess,mess_reduction_function,syncronize ,'completed');

if obj.labIndex == 1
    [ok,err_mess] = obj.control_node_exch.send_message(0,fin_mess);
    if ok == MESS_CODES.ok
        ok  = true;
    else
        ok  = false;
    end
end
obj.mess_framework.clear_messages();

