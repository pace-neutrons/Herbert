function aaa_generate_mcode_from_template (template_file, output_file, substr_in, substr_out)
% Create specific functions from a template
%
%   >> aaa_generate_mcode_from_template (template_file, substr_in, substr_out)
%
%   template_file   File containing the template code from which a specific
%                  function will be generated by string substitutions
%   output_file     Cell array of output file names
%   substr_in       Cell array of strings in the template to be substituted
%   substr_out      Cell array of cell arrays of strings, one cell array per specific
%                  function, containing the strings 
%
% Lines in the template file beginning '%!' will be ignored and not copied to the output file(s).
% Run from the folder that contains this utility function
%
% EXAMPLE:
%   template_file='integrate_nd_iax_points_template.m';
%   output_file={'integrate_3d_x_points.m',...
%                'integrate_3d_y_points.m'};
%   substr_in={'integrate_nd_iax_points_template','iax=1','ndim=2'};
%   substr_out{1}={'integrate_3d_x_points','iax=1','ndim=3'};
%   substr_out{2}={'integrate_3d_y_points','iax=2','ndim=3'};

% Read in template file, removing special comment lines
disp('-------------------------------------------------------------------------------')
tstr=read_text(template_file);
ok=true(numel(tstr),1);
for i=1:numel(tstr)
    if numel(tstr{i})>=2 && strcmp(tstr{i}(1:2),'%!')
        ok(i)=false;
    end
end
tstr=tstr(ok);
disp(' ')

% Create output files, if necessary
for i=1:numel(substr_out)
    create_output_file(tstr,output_file{i},substr_in,substr_out{i});
    disp(' ')
end

%----------------------------------------------------------------------------------------
function create_output_file(tstr,output_file,substr_in,substr_out)

% Create output 
opstrnew=tstr;
for i=1:numel(substr_in)
    opstrnew=strrep(opstrnew,substr_in{i},substr_out{i});
end

% See if existing file needs to be replaced
if ~isempty(output_file)
    if ~isempty(dir(output_file))
        opstr=read_text(output_file);
        if numel(opstr)==numel(opstrnew) && isequal(opstr,opstrnew)
            disp('   - No changes to code made')
            return
        end
    else
        disp(['Creating file ',output_file])
    end
else
    error('Check output file name')
end

% Write output
% TGP thinks that fopen(output_file,'wt') opens with discard of existing contents of an existing file,
% which is what may be needed for the SVN book-keeping to work
fid=fopen(output_file,'wt');
if fid<0
    error(['Problem writing to ',output_file])
end
for i=1:numel(opstrnew)
    fprintf(fid,'%s\n', opstrnew{i});
end
fclose(fid);
disp('   - *** File updated')
