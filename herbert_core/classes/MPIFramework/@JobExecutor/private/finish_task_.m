function [ok,err_mess,obj]=finish_task_(obj,varargin)
% set up tag, indicating that the job have finished and
% send message with output job results.
%
%Input form:
% [ok,err_mess,obj]= finish_task_(obj,OtherMessage,mess_reduction_function,...
%                    ['-synchronous'|'-asynchronous']);
%
% clear all existing messages intended or generated by this job
%
% wait for all messages of this kind to arrive
pause(1); % rather for tests then for any reasonable error.
syncronize = true;
if nargin > 1
    [ok,err_mess,synchr,asynch,argi] = parse_char_options(varargin,{'-synchronous','-asynchronous'});
    if ~ok
        error('JOB_EXECUTOR:invalid_argument',err_mess);
    end
    if synchr
        if asynch
            error('JOB_EXECUTOR:invalid_argument',...
                'both -synchronous and -asynchronous options can not be specified together');
        else
            syncronize = true;
        end
    else
        syncronize = ~asynch;
    end
    
else
    argi = {};
end

if numel(argi) > 0 && ~isempty(argi{1})
    mess = argi{1};
    %disp(['in finish task, got message with id: ',mess.mess_name]);
    if obj.return_results_  && ~isempty(obj.task_results_holder_)
        if isempty(mess.payload)
            mess.payload = obj.task_results_holder_;
        else
            mess.payload = [{mess.payload},obj.task_results_holder_];
        end
    end
    % This should not be necessary, as further cancellation code
    % should cancel other
    % lab jobs ans synchronous execution would wait for other labs 'canceled' results
    % This would not work in test mode, so test mode should always be run
    % as asynchronous
    %if isa(mess,'FailedMessage')
    %    synchronize  = false;
    %end
else
    mess = aMessage('completed');
    if obj.return_results_
        mess.payload = obj.task_results_holder_;
    end
end
if numel(argi)>1
    mess_reduction_function = argi{2};
else
    mess_reduction_function = [];
end

if ~exist('mess_reduction_function','var')
    % function used to reduce messages received from all labs contributing
    % labs and process final message to send to host
    mess_reduction_function = [];
end
%disp([' finishing job synchronously ',num2str(syncronize)]);
%disp(' before reducing message "completed');
[ok,err_mess,fin_mess] = reduce_messages_(obj,mess,mess_reduction_function,syncronize ,'completed');

if obj.labIndex == 1
    [ok,err_mess] = obj.control_node_exch.send_message(0,fin_mess);
    if ok == MESS_CODES.ok
        ok  = true;
    else
        ok  = false;
    end
end
% clear all previous messages may be left in the message cache
% (especially 'failed' message which is never popped in normal way)
mess_cache.instance().delete();
obj.mess_framework.clear_messages();
obj.task_results_holder_ = {};
