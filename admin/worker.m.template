function [ok,err_mess]=worker(worker_controls_string)
% function used as standard worker to do a job in different Matlab
% session.
%
% To work, should be present on a data search path, before Herbert is
% initialized as may need to initialize Herbert and Horace itself
%
%Inputs:
% worker_controls_string - the structure, containing information, necessary to
%              initiate the job.
%              Due to the fact this string is transferred
%              through pipes its size is system dependent and limited, so
%              contains only minimal initialization information, namely the
%              folder name where the job initialization data are located on
%              a remote system
%
% $Revision$ ($Date$)
%
err_mess = [];
if isempty(which('herbert_init.m'))
    horace_on();
end
% Check current state of mpi framework and set up deployment status
% within Matlab code to run
mis = MPI_State.instance();
mis.is_deployed = true;
is_tested = mis.is_tested; % set up to tested state within unit tests.
%
% for testing we need to recover 'not-deployed' state to avoid clashes with
% other unit tests. The production job finishes Matlab and clean-up is not necessary
% though doing no harm.
clot = onCleanup(@()(setattr(mis,'is_deployed',false)));


control_struct = iMessagesFramework.deserialize_par(worker_controls_string);
% Initalize config files to use on remote session. Needs to be initialized
% first as may be used by message framework.
%
% remove configurations, may be loaded in memory while horace was
% initialized.
config_store.instance('clear');
% Where config files are stored:
config_exchange_folder = fullfile(control_struct.data_path,config_store.config_folder_name);
% set pas to config sources:
config_store.set_config_folder(config_exchange_folder);
% instantiate filebasedMessages framework, used to transfer initial data,
% exchange messages between head node and workers pool and display log
% information
fbMPI = MessagesFilebased(control_struct);
% initiate file-based framework to exchange messages between head node and
% the pool of workers

keep_worker_running = true;
while keep_worker_running
    % clear all previus messages may be left in the message cash
    % (especially 'failed' message which is never popped in normal way)
    mess_cash.instance().delete();
    %
    %fh = mess_cash.instance().log_file_h;
    %fprintf(fh,'waiting for "starting" message\n');
    [ok,err,mess]= fbMPI.receive_message(0,'starting');
    %fprintf(fh,'got "starting" message\n');
    if ok ~= MESS_CODES.ok
        mess = aMessage('failed');
        err_mess = sprintf('job N%s failed while receive_je_info Error: %s:',...
            control_struct.jobID,err);
        mess.payload = err_mess;
        fbMPI.send_message(mess);
        ok = MESS_CODES.runtime_error;
        return;
    else
        worker_init_data = mess.payload;
        keep_worker_running = worker_init_data.keep_worker_running;
    end
    [ok,err]=fbMPI.send_message(0,'started');
    if ok ~= MESS_CODES.ok
        mess = aMessage('failed');
        err_mess = sprintf('job N%s failed while sending "started" message Error: %s:',...
            control_struct.jobID,err);
        mess.payload = err_mess;
        fbMPI.send_message(mess);
        ok = MESS_CODES.runtime_error;
        return;
    end
    %fprintf(fh,'sent "started" message\n');
    exit_at_the_end = ~is_tested && worker_init_data.exit_on_compl;
    %
    % receive init message which defines the job parameters
    % should block execution until this message is received.
    [ok,err_mess,init_message] = fbMPI.receive_message(0,'init');
    if ok ~= MESS_CODES.ok
        [ok,err_mess]=je.finish_task(FailMessage(err_mess));
        if exit_at_the_end
            exit;
        else
            return
        end
    end
    %fprintf(fh,'got "init" message\n');
    
    % instantiate job executor class.
    je = feval(worker_init_data.JobExecutorClassName);
    % Attach jobExecutor methods to mpi singleton to be availible from any part
    % of the code.
    mis.logger = @(step,n_steps,time,add_info)...
        (je.log_progress(step,n_steps,time,add_info));
    
    mis.check_cancelled = @()(f_canc(je));
    %mis.mpi_framework = je.mess_framework;
    
    try
        [je,mess] = je.init(fbMPI,control_struct,init_message);
        if ~isempty(mess)
            err = sprinft(' Error sending ''started'' message from task N%d',...
                fbMPI.labIndex);
            error('WORKER:init_worker',err);
        end
        % Execute job (run main job executor's do_job method
        %fprintf(fh,'je loop started\n');
        while ~je.is_completed()
            je= je.do_job();
            % when its tested, workers are tested in single matlab session so it will hand up on synchronization
            if ~is_tested
                % when not tested, the synchronization is mandatory
                je.labBarrier(); % Wait until all workers finish their job before reducing the data
            end
            je = je.reduce_data();
            
        end
        %fprintf(fh,'je loop completed\n');
    catch ME
        %fprintf(fh,'je exception caught\n');
        if ~strcmpi(ME.identifier,'MESSAGE_FRAMEWORK:cancelled')
            err_text = sprintf('task N%d failed at jobExecutor %s. Reason: %s',...
                worker_init_data.JobExecutorClassName,je.labIndex,ME.message);
            mess = FailMessage(err_text,ME);
            %save('error_mess','mess');
            if ~is_tested
                % when not tested, the synchronization is mandatory
                je.labBarrier(); % Wait until all workers finish their job before reducing the data
            end            
            [ok,err_mess]=je.finish_task(mess);
        end
        if keep_worker_running
            continue;
        else
            if exit_at_the_end
                exit;
            else
                return;
            end
        end
    end
    
    [ok,err_mess] = je.finish_task();
end
%pause
if exit_at_the_end
    exit;
end


function f_canc(job_executor)
if job_executor.is_job_cancelled()
    error('MESSAGE_FRAMEWORK:cancelled',...
        'Messages framework has been cancelled or is not initialized any more')
end

