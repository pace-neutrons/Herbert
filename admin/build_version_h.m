function build_version_h(pack_folder)
% Build Horace/herbert version file used by C++ code
%
% Input: location of the upper root folder of the package (where
% _LowLevelCode is located)
%
% using predefined
%
version_file = 'version.h';
ver_file_fp = fullfile(pack_folder,'_LowLevelCode','cpp','utility',version_file);
if is_file(ver_file_fp)
    delete(ver_file_fp);
end
[~,pack_name] = fileparts(pack_folder);
if contains(pack_name,'Herbert')
    pack_name = 'Herbert';
elseif contains(pack_name,'Horace')
    pack_name = 'Horace';
else
    error('HERBERT:invalid_argument',...
        'Building version for unknown package %s. Only Horace and Herbert are accepted',...
        pack_name)
end
%
version_template = fullfile(pack_folder,'VERSION');
fh_source = fopen(version_template );
if fh_source<1
    error('HERBERT_MEX:runtime_error',...
        ' Can not open version template %s',...
        version_template);
end
clob_in = onCleanup(@()fclose(fh_source));
ver = fscanf(fh_source,'%s');
%
build_version = sprintf("%s from %s",ver,date);
% construct version.h for C++ code

fh_targ = fopen(ver_file_fp,'w');
clob_ou = onCleanup(@()fclose(fh_targ));
fprintf(fh_targ,['/* This file is auto-generated by buid_version_h.m. Do not edit, any edits may be lost. */\n',...
    '#pragma once\n\n','namespace %s {\n',...
    '    constexpr char VERSION[] = "%s";\n    constexpr char VER_NOOMP[] = "%s no-omp";\n}'],...
    pack_name,build_version,build_version);

clear clob_ou;
if contains(pack_folder,'Herbert')
    init_version = which('herbert_get_build_version');
    if isempty(init_version)
        init_version = fullfile(pack_folder,'herbert_core','admin','herbert_get_build_version.m');
    end
    % construct herbert_get_build_version function
    cont = {...
        '% This file is auto-generated by herbert/build_version_h. Do not edit, any edits may be lost.',...
        'function out = herbert_get_build_version()',...
        sprintf('out = ''%s'';',build_version)};
else % horace
    init_version = which('horace_get_build_version');
    if isempty(init_version)
        init_version = fullfile(pack_folder,'horace_core','admin','horace_get_build_version.m');
    end
    % construct horace_get_build_version function
    cont = {...
        '% This file is auto-generated by herbert/build_version_h. Do not edit, any edits may be lost.',...
        'function out = horace_get_build_version()',...
        sprintf('out = ''%s'';',build_version)};
end
fh_targ = fopen(init_version,'w');
clob_ou = onCleanup(@()fclose(fh_targ));
for i=1:numel(cont)
    fprintf(fh_targ,'%s\n',cont{i});
end

